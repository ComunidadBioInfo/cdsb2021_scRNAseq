[["index.html", "Análisis de datos transcriptómicos de célula única (scRNA-seq) con R y Bioconductor Información del taller Formato del curso: en línea ¿Quién es nuestra audiencia? Formulario de registro Instructores Ponentes e instructores invitados Ayudantes Temario Código de Conducta Pre-requisitos Horario Materiales Zoom Organizadores Patrocinadores Información sesión de R Licencia", " Análisis de datos transcriptómicos de célula única (scRNA-seq) con R y Bioconductor Leonardo Collado-Torres Lieber Institute for Brain Development, Johns Hopkins Medical Campus Información del taller 9-13 de agosto de 2021 ¡Bienvenidxs al taller Análisis de datos transcriptómicos de célula única (scRNA-seq) con R y Bioconductor! En los últimos años, la generación y análisis de transcriptomas de célula única ha cobrado gran importancia para resolver preguntas biológicas. En este taller revisaremos los métodos más recientes para analizar datos de single cell RNA-seq (transcriptómica en células únicas), usando paquetes de R especializados que están disponibles libremente vía Bioconductor. Este taller estará basado en el libro Orchestrating Single Cell Analysis with Bioconductor que fue publicado en Nature Methods y es de los artículos con mayor publicidad en 2020 y 2021. Durante este taller aprenderás las herramientas estadísticas para analizar datos de transcriptómica en células únicas usando Bioconductor. Revisaremos qué es un análisis de datos de célula única, cuáles son las principales diferencias entre el análisis de transcriptomas de célula única y en bulk, cómo documentar tu análisis y algunas herramientas para interpretar tus resultados. Formato del curso: en línea Este es un curso digital. Las sesiones y material del curso serán presentados en línea. Esta modalidad incluirá grabaciones de video o audio del material, intercambio de archivos y sesiones de discusión temáticos, ejercicios de auto-evaluación y acceso a los instructores para comentarios durante el curso. ¿Quién es nuestra audiencia? Este curso está dirigido a personas que desean aprender cómo analizar datos transcriptómicos de célula única usando paquetes de R/Bioconductor. Revisa los videos de CDSB2020 en YouTube o la página web de cdsb2020, que es similar al taller de este año. Formulario de registro http://congresos.nnb.unam.mx/EBM2021/ Do you want to learn how to analyze #scRNAseq with @Bioconductor?Learn with @lcolladotor@yalbi_ibm @AnaBetty2304 @argininaa @naielisha @lawrah20 @roramirezf94 @jvelezmagic @KevsGenomic @mpadilla905Material adapted from OSCA @PeteHaitch et al#rstatshttps://t.co/MIfFmKt3Fq pic.twitter.com/nSPCmVEPAC — ComunidadBioInfo (@CDSBMexico) July 2, 2021 Instructores Leonardo Collado-Torres Yalbi Balderas Ponentes e instructores invitados Ana Beatriz Villaseñor Altamirano Citlali Gil Aguillon Elisa Márquez Zavala Laura Lucila Gómez Romero Ricardo Ramirez Flores Ayudantes Jesús Vélez Santiago Kevin Emmanuel Meza Landeros Mónica Padilla Gálvez Temario Día 1 Introducción a R y RStudio Ejercicio usando usethis, here y postcards Introducción a RNA-seq de célula única (scRNA-seq) con Bioconductor y al libro de OSCA Día 2 Estructura e importe de datos Comunidades RLadies Control de calidad Día 3 Normalización de datos Foto y actividades de la comunidad Selección de genes Día 4 Reducción de dimensiones Clustering Identificación de genes marcadores Día 5 Anotación de clusters de células Análisis de expresión diferencial Plática científica del ponente invitadx Código de Conducta Seguiremos el código de conducta de la CDSB México comunidadbioinfo.github.io/es/codigo-de-conducta/ además del código de conducta de Bioconductor bioconductor.org/about/code-of-conduct/. Pre-requisitos De forma general, Computadora con al menos 8Gb de memoria y permisos de administrador para instalar paqueterías de R. Tener instalado R y RStudio en su última versión. Conocimientos básicos de secuenciación de transcriptomas. Conocimientos básicos de RStudio (Creación de Rscripts, manejo de la consola de RStudio, manejo del espacio de visualización). Conocimiento intermedio de R (Manejo de variables, lectura de archivos, creación y manejo de data frames y listas, generación de gráficas básicas, conocimiento sobre cómo instalar paqueterías desde CRAN y Bioconductor). Más específicamente, computadora con al menos 8 GB de memoria RAM, aplicación Zoom https://zoom.us/download, R versión 4.1 instalada de CRAN https://cran.r-project.org/ (ver video de https://youtu.be/6knyHlUe1cM sobre como instalar R en macOS o winOS), RStudio versión 1.4 https://www.rstudio.com/products/rstudio/download/#download, y los siguientes paquetes de R y Bioconductor: ## Para instalar paquetes if (!requireNamespace(&quot;remotes&quot;, quietly = TRUE)) { install.packages(&quot;remotes&quot;) } ## Para instalar paquetes de Bioconductor remotes::install_cran(&quot;BiocManager&quot;) BiocManager::version() # El anterior comando debe mostrar que estás usando la versión 3.13 ## Instala los paquetes de R que necesitamos ## BiocManager::install(&quot;batchelor&quot;, &quot;BiocFileCache&quot;, &quot;BiocSingular&quot;, &quot;bluster&quot;, &quot;cowplot&quot;, &quot;dplyr&quot;, &quot;DropletUtils&quot;, &quot;EnsDb.Hsapiens.v86&quot;, &quot;ExperimentHub&quot;, &quot;fossil&quot;, &quot;here&quot;, &quot;iSEE&quot;, &quot;org.Mm.eg.db&quot;, &quot;patchwork&quot;, &quot;PCAtools&quot;, &quot;pheatmap&quot;, &quot;plotly&quot;, &quot;pryr&quot;, &quot;RColorBrewer&quot;, &quot;rsthemes&quot;, &quot;Rtsne&quot;, &quot;scater&quot;, &quot;scPipe&quot;, &quot;scran&quot;, &quot;scRNAseq&quot;, &quot;sessioninfo&quot;, &quot;Seurat&quot;, &quot;SingleCellExperiment&quot;, &quot;suncalc&quot;, &quot;TENxPBMCData&quot;, &quot;usethis&quot;, &quot;uwot&quot;) Horario Consulta el calendario de este curso en: http://bit.ly/calendarcdsb2021. Horario Tema Instructores Día 1: Agosto 9, 2021 08:00-09:00 (opcional) Ayuda con instalación de paquetes de R 09:00-09:30 Inauguración EBM2021 Julio Collado Vides, Christian Sohlenkamp, Irma Martínez Flores, Shirley Alquicira Hernández 09:30-10:00 Bienvenida a la CDSB y revisión del código de conducta Leonardo Collado-Torres 10:00-11:00 Introducción a R y RStudio Leonardo Collado-Torres 11:00-11:30 Descanso 11:30-14:00 Ejercicio usando usethis, here y postcards Citlali Gil Aguillon y Elisa Márquez Zavala 14:00-15:30 Descanso: comida 15:30-17:00 Introducción a RNA-seq de célula única (scRNA-seq) con Bioconductor y al libro de OSCA Citlali Gil Aguillon y Elisa Márquez Zavala 17:00-18:00 (Invitada) Principios FAIR para software de investigación Paula Andrea Día 2: Agosto 10, 2021 08:00-09:00 (opcional) Ayuda con instalación de paquetes de R 09:00-11:00 Estructura e importe de datos Citlali Gil Aguillon y Elisa Márquez Zavala 11:00-11:30 Descanso 11:30-12:00 Keynote: La comunidad R-Ladies Ana Beatriz Villaseñor Altamirano 12:00-14:00 Control de calidad Leonardo Collado-Torres 14:00-15:30 Descanso: comida 15:30-17:30 Control de calidad Leonardo Collado-Torres 17:30-18:00 (opcional) Interactúa con lxs instructores y ayudantes Día 3: Agosto 11, 2021 08:00-09:00 (opcional) Ayuda con instalación de paquetes de R 09:00-10:30 Normalización de datos Ana Beatriz Villaseñor Altamirano 10:30-11:00 Foto 11:00-11:30 Descanso 11:30-12:30 Selección de genes Yalbi Balderas 12:30-14:00 Actividades para construir la comunidad Leonardo Collado-Torres 14:00-15:30 Descanso: comida 15:30-17:30 Selección de genes Laura Lucila Gómez Romero 17:30-18:00 (opcional) Interactúa con lxs instructores y ayudantes Día 4: Agosto 12, 2021 08:00-09:00 (opcional) Ayuda con instalación de paquetes de R 09:00-11:00 Reducción de dimensiones Laura Lucila Gómez Romero 11:00-11:30 Descanso 11:30-14:00 Clustering Laura Lucila Gómez Romero 14:00-15:30 Descanso: comida 15:30-17:30 Identificación de genes marcadores Yalbi Balderas 17:30-18:30 CDSB 2021: Evento social remoto Día 5: Agosto 13, 2021 08:00-09:00 (opcional) Ayuda con instalación de paquetes de R 09:00-10:30 Anotación de clusters de células Yalbi Balderas 10:30-11:00 Evaluación del taller Irma Martínez Flores y Shirley Alquicira Hernández 11:00-11:30 Descanso 11:30-12:30 Análisis de expresión diferencial Leonardo Collado-Torres 12:30-14:00 Introducción a Seurat Kevin Emmanuel Meza Landeros 14:00-15:30 Descanso: comida 15:30-17:00 Plática científica y sesión de preguntas Ricardo Ramirez Flores 17:00-17:30 Clausura y recordatorio de la CDSB 17:30-18:00 (opcional) Interactúa con lxs instructores y ayudantes Materiales Descarga los materiales con usethis::use_course('comunidadbioinfo/cdsb2021_scRNAseq') o revisalos en línea vía comunidadbioinfo.github.io/cdsb2021_scRNAseq. Zoom Las ligas de Zoom están disponibles exclusivamente para lxs participantes de CDSB2021 vía Slack. Te enviaremos una invitación al correo electrónico que usaste para registrate. Organizadores Comunidad de Desarrolladores de Software en Bioinformática CDSB Red Mexicana de Bioinformática RMB Nodo Nacional de Bioinformática en la UNAM NNB-CCG Patrocinadores Agradecemos a nuestros patrocinadores: Información sesión de R Detalles de la sesión de R usada para crear este libro. El código fuente está disponible vía ComunidadBioInfo/cdsb2021_scRNAseq. options(width = 120) pkgs &lt;- installed.packages()[, &quot;Package&quot;] sessioninfo::session_info(pkgs, include_base = TRUE) ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS 10.16 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz America/Mexico_City ## date 2021-08-08 ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ## ! package * version date lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.0.0) ## acepack 1.4.1 2016-10-29 [1] CRAN (R 4.0.0) ## acs 2.1.4 2019-02-19 [1] CRAN (R 4.0.0) ## ade4 1.7-17 2021-06-17 [1] CRAN (R 4.0.2) ## afex 1.0-1 2021-07-22 [1] CRAN (R 4.0.2) ## affxparser 1.62.0 2020-10-27 [1] Bioconductor ## affy 1.68.0 2020-10-27 [1] Bioconductor ## affycoretools 1.62.0 2020-10-27 [1] Bioconductor ## affyio 1.60.0 2020-10-27 [1] Bioconductor ## animation 2.6 2018-12-11 [1] CRAN (R 4.0.2) ## annotate 1.68.0 2020-10-27 [1] Bioconductor ## AnnotationDbi 1.52.0 2020-10-27 [1] Bioconductor ## AnnotationFilter 1.14.0 2020-10-27 [1] Bioconductor ## AnnotationForge 1.32.0 2020-10-27 [1] Bioconductor ## AnnotationHub 2.22.1 2021-04-16 [1] Bioconductor ## apcluster 1.4.8 2019-08-21 [1] CRAN (R 4.0.0) ## ape 5.5 2021-04-25 [1] CRAN (R 4.0.2) ## apeglm 1.12.0 2020-10-27 [1] Bioconductor ## ash 1.0-15 2015-09-01 [1] CRAN (R 4.0.2) ## AsioHeaders 1.16.1-1 2020-07-07 [1] CRAN (R 4.0.0) ## askpass 1.1 2019-01-13 [1] CRAN (R 4.0.0) ## assertive 0.3-6 2020-08-01 [1] CRAN (R 4.0.2) ## assertive.base 0.0-9 2021-02-08 [1] CRAN (R 4.0.2) ## assertive.code 0.0-3 2018-10-21 [1] CRAN (R 4.0.2) ## assertive.data 0.0-3 2018-11-21 [1] CRAN (R 4.0.2) ## assertive.data.uk 0.0-2 2018-10-21 [1] CRAN (R 4.0.2) ## assertive.data.us 0.0-2 2018-10-21 [1] CRAN (R 4.0.2) ## assertive.datetimes 0.0-3 2020-07-30 [1] CRAN (R 4.0.2) ## assertive.files 0.0-2 2016-05-10 [1] CRAN (R 4.0.2) ## assertive.matrices 0.0-2 2018-11-20 [1] CRAN (R 4.0.2) ## assertive.models 0.0-2 2018-10-21 [1] CRAN (R 4.0.2) ## assertive.numbers 0.0-2 2016-05-09 [1] CRAN (R 4.0.2) ## assertive.properties 0.0-4 2016-12-30 [1] CRAN (R 4.0.2) ## assertive.reflection 0.0-5 2020-07-31 [1] CRAN (R 4.0.2) ## assertive.sets 0.0-3 2016-12-30 [1] CRAN (R 4.0.2) ## assertive.strings 0.0-3 2016-05-10 [1] CRAN (R 4.0.2) ## assertive.types 0.0-3 2016-12-30 [1] CRAN (R 4.0.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## attempt 0.3.1 2020-05-03 [1] CRAN (R 4.0.2) ## babelgene 21.4 2021-04-26 [1] CRAN (R 4.0.2) ## backports 1.2.1 2020-12-09 [1] CRAN (R 4.0.2) ## base * 4.0.2 2020-06-23 [?] local ## base64 2.0 2016-05-10 [1] CRAN (R 4.0.2) ## base64enc 0.1-3 2015-07-28 [1] CRAN (R 4.0.0) ## basilisk 1.2.1 2020-12-16 [1] Bioconductor ## basilisk.utils 1.2.2 2021-01-27 [1] Bioconductor ## batchelor 1.6.3 2021-04-16 [1] Bioconductor ## BayesFactor 0.9.12-4.2 2018-05-19 [1] CRAN (R 4.0.2) ## bayesplot 1.8.1 2021-06-14 [1] CRAN (R 4.0.2) ## bayestestR 0.10.5 2021-07-26 [1] CRAN (R 4.0.2) ## bbmle 1.0.23.1 2020-02-03 [1] CRAN (R 4.0.2) ## bdsmatrix 1.3-4 2020-01-13 [1] CRAN (R 4.0.2) ## beachmat 2.6.4 2020-12-20 [1] Bioconductor ## beadarray 2.40.0 2020-10-27 [1] Bioconductor ## BeadDataPackR 1.42.0 2020-10-27 [1] Bioconductor ## beeswarm 0.4.0 2021-06-01 [1] CRAN (R 4.0.2) ## bench 1.1.1 2020-01-13 [1] CRAN (R 4.0.2) ## benchmarkme 1.0.7 2021-03-21 [1] CRAN (R 4.0.2) ## benchmarkmeData 1.0.4 2020-04-23 [1] CRAN (R 4.0.2) ## BH 1.75.0-0 2021-01-11 [1] CRAN (R 4.0.2) ## bibtex 0.4.2.3 2020-09-19 [1] CRAN (R 4.0.2) ## Biobase 2.50.0 2020-10-27 [1] Bioconductor ## BiocFileCache 1.14.0 2020-10-27 [1] Bioconductor ## BiocGenerics 0.36.1 2021-04-16 [1] Bioconductor ## biocGraph 1.52.0 2020-10-27 [1] Bioconductor ## BiocManager 1.30.16 2021-06-15 [1] CRAN (R 4.0.2) ## BiocNeighbors 1.8.2 2020-12-07 [1] Bioconductor ## BiocParallel 1.24.1 2020-11-06 [1] Bioconductor ## BiocSingular 1.6.0 2020-10-27 [1] Bioconductor ## BiocStyle 2.18.1 2020-11-24 [1] Bioconductor ## BiocVersion 3.12.0 2020-05-14 [1] Bioconductor ## biomaRt 2.46.3 2021-02-11 [1] Bioconductor ## biomartr 0.9.2 2020-01-10 [1] CRAN (R 4.0.0) ## Biostrings 2.58.0 2020-10-27 [1] Bioconductor ## biovizBase 1.38.0 2020-10-27 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.0.2) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.0.2) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.0.2) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.0.2) ## blogdown 1.4 2021-07-23 [1] CRAN (R 4.0.2) ## bluster 1.0.0 2020-10-27 [1] Bioconductor ## bmp 0.3 2017-09-11 [1] CRAN (R 4.0.2) ## bookdown 0.22 2021-04-22 [1] CRAN (R 4.0.2) ## boot 1.3-28 2021-05-03 [1] CRAN (R 4.0.2) ## brew 1.0-6 2011-04-13 [1] CRAN (R 4.0.0) ## bridgesampling 1.1-2 2021-04-16 [1] CRAN (R 4.0.2) ## brio 1.1.2 2021-04-23 [1] CRAN (R 4.0.2) ## Brobdingnag 1.2-6 2018-08-13 [1] CRAN (R 4.0.2) ## broom 0.7.9 2021-07-27 [1] CRAN (R 4.0.2) ## broom.mixed 0.2.7 2021-07-07 [1] CRAN (R 4.0.2) ## broomExtra 4.2.3 2021-05-12 [1] CRAN (R 4.0.2) ## bs4Dash 2.0.2 2021-07-23 [1] CRAN (R 4.0.2) ## BSgenome 1.58.0 2020-10-27 [1] Bioconductor ## bslib 0.2.5.1 2021-05-18 [1] CRAN (R 4.0.2) ## bumphunter 1.32.0 2020-10-27 [1] Bioconductor ## BWStest 0.2.2 2018-10-18 [1] CRAN (R 4.0.2) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 4.0.2) ## Cairo 1.5-12.2 2020-07-07 [1] CRAN (R 4.0.2) ## calibrate 1.7.7 2020-06-19 [1] CRAN (R 4.0.0) ## callr 3.7.0 2021-04-20 [1] CRAN (R 4.0.2) ## car 3.0-11 2021-06-27 [1] CRAN (R 4.0.2) ## carData 3.0-4 2020-05-22 [1] CRAN (R 4.0.0) ## caret 6.0-88 2021-05-15 [1] CRAN (R 4.0.2) ## Category 2.56.0 2020-10-27 [1] Bioconductor ## caTools 1.18.2 2021-03-28 [1] CRAN (R 4.0.2) ## ccdata 1.16.0 2020-10-29 [1] Bioconductor ## ccmap 1.16.0 2020-10-27 [1] Bioconductor ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.0.0) ## CGPfunctions 0.6.3 2020-11-12 [1] CRAN (R 4.0.2) ## checkmate 2.0.0 2020-02-06 [1] CRAN (R 4.0.0) ## choroplethr 3.7.0 2020-08-11 [1] CRAN (R 4.0.2) ## circlize 0.4.13 2021-06-09 [1] CRAN (R 4.0.2) ## class 7.3-19 2021-05-03 [1] CRAN (R 4.0.2) ## classInt 0.4-3 2020-04-07 [1] CRAN (R 4.0.0) ## cli 3.0.1 2021-07-17 [1] CRAN (R 4.0.2) ## clipr 0.7.1 2020-10-08 [1] CRAN (R 4.0.2) ## clisymbols 1.2.0 2017-05-21 [1] CRAN (R 4.0.0) ## clue 0.3-59 2021-04-16 [1] CRAN (R 4.0.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.0.2) ## clusterProfiler 3.18.1 2021-02-11 [1] Bioconductor ## coda 0.19-4 2020-09-30 [1] CRAN (R 4.0.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.0.2) ## coin 1.4-1 2021-02-08 [1] CRAN (R 4.0.2) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 4.0.2) ## colourpicker 1.1.0 2020-09-14 [1] CRAN (R 4.0.2) ## combinat 0.0-8 2012-10-29 [1] CRAN (R 4.0.0) ## commonmark 1.7 2018-12-01 [1] CRAN (R 4.0.0) ## P compiler 4.0.2 2020-06-23 [1] local ## ComplexHeatmap 2.6.2 2020-11-12 [1] Bioconductor ## CompQuadForm 1.4.3 2017-04-12 [1] CRAN (R 4.0.2) ## config 0.3.1 2020-12-17 [1] CRAN (R 4.0.2) ## conquer 1.0.2 2020-08-27 [1] CRAN (R 4.0.2) ## contfrac 1.1-12 2018-05-17 [1] CRAN (R 4.0.2) ## correlation 0.6.1 2021-04-09 [1] CRAN (R 4.0.2) ## corrplot 0.90 2021-06-30 [1] CRAN (R 4.0.2) ## corrr 0.4.3 2020-11-24 [1] CRAN (R 4.0.2) ## covr 3.5.1 2020-09-16 [1] CRAN (R 4.0.2) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.0.2) ## cowsay 0.8.0 2020-02-06 [1] CRAN (R 4.0.2) ## cpp11 0.3.1 2021-06-25 [1] CRAN (R 4.0.2) ## crayon 1.4.1 2021-02-08 [1] CRAN (R 4.0.2) ## credentials 1.3.1 2021-07-25 [1] CRAN (R 4.0.2) ## crossmeta 1.16.1 2020-11-02 [1] Bioconductor ## crosstalk 1.1.1 2021-01-12 [1] CRAN (R 4.0.2) ## csSAM 1.2.4 2013-05-13 [1] CRAN (R 4.0.2) ## cubelyr 1.0.1 2020-11-24 [1] CRAN (R 4.0.2) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.0.2) ## cyclocomp 1.1.0 2016-09-10 [1] CRAN (R 4.0.2) ## d3heatmap 0.6.1.3 2020-10-11 [1] Github (rstudio/d3heatmap@5092396) ## data.table 1.14.0 2021-02-21 [1] CRAN (R 4.0.2) ## datadrivencv 0.1.0 2020-11-03 [1] Github (nstrayer/datadrivencv@0b59804) ## datamods 1.1.5 2021-07-02 [1] CRAN (R 4.0.2) ## datarium 0.1.0 2019-05-21 [1] CRAN (R 4.0.2) ## P datasets * 4.0.2 2020-06-23 [1] local ## datawizard 0.1.0 2021-06-18 [1] CRAN (R 4.0.2) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 4.0.2) ## dbplot 0.3.3 2020-02-07 [1] CRAN (R 4.0.0) ## dbplyr 2.1.1 2021-04-06 [1] CRAN (R 4.0.2) ## DelayedArray 0.16.3 2021-03-24 [1] Bioconductor ## DelayedMatrixStats 1.12.3 2021-02-03 [1] Bioconductor ## deldir 0.2-10 2021-02-16 [1] CRAN (R 4.0.2) ## dendextend 1.15.1 2021-05-08 [1] CRAN (R 4.0.2) ## dendsort 0.3.4 2021-04-20 [1] CRAN (R 4.0.2) ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 4.0.2) ## derfinder 1.24.2 2020-12-18 [1] Bioconductor ## derfinderHelper 1.24.1 2020-12-18 [1] Bioconductor ## desc 1.3.0 2021-03-05 [1] CRAN (R 4.0.2) ## DescTools 0.99.42 2021-06-17 [1] CRAN (R 4.0.2) ## DESeq2 1.30.1 2021-02-19 [1] Bioconductor ## DEsingle 1.10.0 2020-10-27 [1] Bioconductor ## deSolve 1.28 2020-03-08 [1] CRAN (R 4.0.2) ## devtools 2.4.2 2021-06-07 [1] CRAN (R 4.0.2) ## DiagrammeR 1.0.6.1 2020-05-08 [1] CRAN (R 4.0.0) ## DiagrammeRsvg 0.1 2016-02-04 [1] CRAN (R 4.0.0) ## dichromat 2.0-0 2013-01-24 [1] CRAN (R 4.0.0) ## diffobj 0.3.4 2021-03-22 [1] CRAN (R 4.0.2) ## digest 0.6.27 2020-10-24 [1] CRAN (R 4.0.2) ## dnet 1.1.7 2020-02-20 [1] CRAN (R 4.0.2) ## DO.db 2.9 2020-08-20 [1] Bioconductor ## dockerfiler 0.1.3 2019-03-19 [1] CRAN (R 4.0.2) ## doMC 1.3.7 2020-10-14 [1] CRAN (R 4.0.2) ## doParallel 1.0.16 2020-10-16 [1] CRAN (R 4.0.2) ## doRNG 1.8.2 2020-01-27 [1] CRAN (R 4.0.0) ## DOSE 3.16.0 2020-10-27 [1] Bioconductor ## dotCall64 1.0-1 2021-02-11 [1] CRAN (R 4.0.2) ## downlit 0.2.1 2020-11-04 [1] CRAN (R 4.0.2) ## downloader 0.4 2015-07-09 [1] CRAN (R 4.0.0) ## dplyr 1.0.7 2021-06-18 [1] CRAN (R 4.0.2) ## dqrng 0.3.0 2021-05-01 [1] CRAN (R 4.0.2) ## DropletUtils 1.10.3 2021-02-02 [1] Bioconductor ## DT 0.18 2021-04-14 [1] CRAN (R 4.0.2) ## dtplyr 1.1.0 2021-02-20 [1] CRAN (R 4.0.2) ## dunn.test 1.3.5 2017-10-27 [1] CRAN (R 4.0.2) ## dygraphs 1.1.1.6 2018-07-11 [1] CRAN (R 4.0.0) ## dynamicTreeCut 1.63-1 2016-03-11 [1] CRAN (R 4.0.2) ## e1071 1.7-8 2021-07-28 [1] CRAN (R 4.0.2) ## edgeR 3.32.1 2021-01-14 [1] Bioconductor ## effectsize 0.4.5 2021-05-25 [1] CRAN (R 4.0.2) ## ellipse 0.4.2 2020-05-27 [1] CRAN (R 4.0.0) ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.0.2) ## elliptic 1.4-0 2019-03-14 [1] CRAN (R 4.0.2) ## emdbook 1.3.12 2020-02-19 [1] CRAN (R 4.0.2) ## emmeans 1.6.2-1 2021-07-08 [1] CRAN (R 4.0.2) ## emo 0.0.0.9000 2021-02-24 [1] Github (hadley/emo@3f03b11) ## EMT 1.1 2013-01-29 [1] CRAN (R 4.0.2) ## enc 0.2.2 2019-12-19 [1] CRAN (R 4.0.0) ## EnrichmentBrowser 2.20.7 2020-12-10 [1] Bioconductor ## enrichplot 1.10.2 2021-01-28 [1] Bioconductor ## EnsDb.Hsapiens.v79 2.99.0 2020-09-03 [1] Bioconductor ## EnsDb.Hsapiens.v86 2.99.0 2020-08-03 [1] Bioconductor ## ensembldb 2.14.1 2021-04-19 [1] Bioconductor ## esquisse 1.0.2 2021-07-05 [1] CRAN (R 4.0.2) ## estimability 1.3 2018-02-11 [1] CRAN (R 4.0.2) ## europepmc 0.4 2020-05-31 [1] CRAN (R 4.0.2) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## evd 2.3-3 2018-04-25 [1] CRAN (R 4.0.0) ## Exact 2.1 2020-10-02 [1] CRAN (R 4.0.2) ## ExperimentHub 1.16.1 2021-04-16 [1] Bioconductor ## expm 0.999-6 2021-01-13 [1] CRAN (R 4.0.2) ## extrafont 0.17 2014-12-08 [1] CRAN (R 4.0.2) ## extrafontdb 1.0 2012-06-11 [1] CRAN (R 4.0.2) ## ez 4.4-0 2016-11-02 [1] CRAN (R 4.0.2) ## factoextra 1.0.7 2020-04-01 [1] CRAN (R 4.0.0) ## FactoMineR 2.4 2020-12-11 [1] CRAN (R 4.0.2) ## fansi 0.5.0 2021-05-25 [1] CRAN (R 4.0.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.0.2) ## fastcluster 1.2.3 2021-05-24 [1] CRAN (R 4.0.2) ## fastGHQuad 1.0 2018-09-30 [1] CRAN (R 4.0.2) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.0.2) ## fastmatch 1.1-3 2021-07-23 [1] CRAN (R 4.0.2) ## fdrtool 1.2.16 2021-01-06 [1] CRAN (R 4.0.2) ## feather 0.3.5 2019-09-15 [1] CRAN (R 4.0.0) ## ff 4.0.4 2020-10-13 [1] CRAN (R 4.0.2) ## fgsea 1.16.0 2020-10-27 [1] Bioconductor ## fields 12.5 2021-06-25 [1] CRAN (R 4.0.2) ## filehash 2.4-2 2019-04-17 [1] CRAN (R 4.0.0) ## filelock 1.0.2 2018-10-05 [1] CRAN (R 4.0.0) ## fitdistrplus 1.1-5 2021-05-28 [1] CRAN (R 4.0.2) ## flashClust 1.01-2 2012-08-21 [1] CRAN (R 4.0.2) ## flexdashboard 0.5.2 2020-06-24 [1] CRAN (R 4.0.2) ## FNN 1.1.3 2019-02-15 [1] CRAN (R 4.0.0) ## forcats 0.5.1 2021-01-27 [1] CRAN (R 4.0.2) ## foreach 1.5.1 2020-10-15 [1] CRAN (R 4.0.2) ## foreign 0.8-81 2020-12-22 [1] CRAN (R 4.0.2) ## forge 0.2.0 2019-02-26 [1] CRAN (R 4.0.0) ## formatR 1.11 2021-06-01 [1] CRAN (R 4.0.2) ## Formula 1.2-4 2020-10-16 [1] CRAN (R 4.0.2) ## formula.tools 1.7.1 2018-03-01 [1] CRAN (R 4.0.2) ## fortunes 1.5-4 2016-12-29 [1] CRAN (R 4.0.2) ## fossil 0.4.0 2020-03-23 [1] CRAN (R 4.0.2) ## fresh 0.2.0 2020-05-29 [1] CRAN (R 4.0.2) ## fs 1.5.0 2020-07-31 [1] CRAN (R 4.0.2) ## functionplotR 0.1.3 2021-06-26 [1] Github (vnijs/functionplotR@1b73f8b) ## futile.logger 1.4.3 2016-07-10 [1] CRAN (R 4.0.0) ## futile.options 1.0.1 2018-04-20 [1] CRAN (R 4.0.0) ## future 1.21.0 2020-12-10 [1] CRAN (R 4.0.2) ## future.apply 1.7.0 2021-01-04 [1] CRAN (R 4.0.2) ## fuzzyjoin 0.1.6 2020-05-15 [1] CRAN (R 4.0.0) ## gamlss 5.3-4 2021-03-31 [1] CRAN (R 4.0.2) ## gamlss.data 6.0-1 2021-03-18 [1] CRAN (R 4.0.2) ## gamlss.dist 5.3-2 2021-03-09 [1] CRAN (R 4.0.2) ## gap 1.2.3-1 2021-04-21 [1] CRAN (R 4.0.2) ## gapminder 0.3.0 2017-10-31 [1] CRAN (R 4.0.0) ## gargle 1.2.0 2021-07-02 [1] CRAN (R 4.0.2) ## gbRd 0.4-11 2012-10-01 [1] CRAN (R 4.0.0) ## gclus 1.3.2 2019-01-07 [1] CRAN (R 4.0.0) ## gcrma 2.62.0 2020-10-27 [1] Bioconductor ## gdata 2.18.0 2017-06-06 [1] CRAN (R 4.0.0) ## gdtools 0.2.3 2021-01-06 [1] CRAN (R 4.0.2) ## genefilter 1.72.1 2021-01-21 [1] Bioconductor ## geneplotter 1.68.0 2020-10-27 [1] Bioconductor ## generics 0.1.0 2020-10-31 [1] CRAN (R 4.0.2) ## GeneTonic 1.2.0 2020-10-27 [1] Bioconductor ## GenomeInfoDb 1.26.7 2021-04-08 [1] Bioconductor ## GenomeInfoDbData 1.2.4 2021-03-04 [1] Bioconductor ## GenomicAlignments 1.26.0 2020-10-27 [1] Bioconductor ## GenomicFeatures 1.42.3 2021-04-04 [1] Bioconductor ## GenomicFiles 1.26.0 2020-10-27 [1] Bioconductor ## GenomicRanges 1.42.0 2020-10-27 [1] Bioconductor ## GEOmetadb 1.52.0 2020-10-27 [1] Bioconductor ## GEOquery 2.58.0 2020-10-27 [1] Bioconductor ## geosphere 1.5-10 2019-05-26 [1] CRAN (R 4.0.0) ## gert 1.3.1 2021-06-23 [1] CRAN (R 4.0.2) ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.0.2) ## ggalluvial 0.12.3 2020-12-05 [1] CRAN (R 4.0.2) ## GGally 2.1.2 2021-06-21 [1] CRAN (R 4.0.2) ## ggalt 0.4.0 2017-02-15 [1] CRAN (R 4.0.2) ## gganimate 1.0.7 2020-10-15 [1] CRAN (R 4.0.2) ## ggbeeswarm 0.6.0 2017-08-07 [1] CRAN (R 4.0.2) ## ggbio 1.38.0 2020-10-27 [1] Bioconductor ## ggcorrplot 0.1.3 2019-05-19 [1] CRAN (R 4.0.2) ## ggdendro 0.1.22 2020-09-13 [1] CRAN (R 4.0.2) ## ggExtra 0.9 2019-08-27 [1] CRAN (R 4.0.2) ## ggfittext 0.9.1 2021-01-30 [1] CRAN (R 4.0.2) ## ggforce 0.3.3 2021-03-05 [1] CRAN (R 4.0.2) ## ggfortify 0.4.12 2021-07-07 [1] CRAN (R 4.0.2) ## ggiraph 0.7.10 2021-05-19 [1] CRAN (R 4.0.2) ## ggmap 3.0.0 2019-02-05 [1] CRAN (R 4.0.0) ## ggmosaic 0.3.3 2021-02-23 [1] CRAN (R 4.0.2) ## ggplot2 3.3.5 2021-06-25 [1] CRAN (R 4.0.2) ## ggplotify 0.0.7 2021-05-11 [1] CRAN (R 4.0.2) ## ggpubr 0.4.0 2020-06-27 [1] CRAN (R 4.0.2) ## ggraph 2.0.5 2021-02-23 [1] CRAN (R 4.0.2) ## ggrepel 0.9.1 2021-01-15 [1] CRAN (R 4.0.2) ## ggridges 0.5.3 2021-01-08 [1] CRAN (R 4.0.2) ## ggsci 2.9 2018-05-14 [1] CRAN (R 4.0.0) ## ggsignif 0.6.2 2021-06-14 [1] CRAN (R 4.0.2) ## ggspatial 1.1.5 2021-01-04 [1] CRAN (R 4.0.2) ## ggstatsplot 0.8.0 2021-06-09 [1] CRAN (R 4.0.2) ## ggthemes 4.2.4 2021-01-20 [1] CRAN (R 4.0.2) ## gh 1.3.0 2021-04-30 [1] CRAN (R 4.0.2) ## gifski 1.4.3-1 2021-05-02 [1] CRAN (R 4.0.2) ## git2r 0.28.0 2021-01-10 [1] CRAN (R 4.0.2) ## gitcreds 0.1.1 2020-12-04 [1] CRAN (R 4.0.2) ## gld 2.6.2 2020-01-08 [1] CRAN (R 4.0.2) ## Glimma 2.0.0 2020-10-27 [1] Bioconductor ## glmnet 4.1-2 2021-06-24 [1] CRAN (R 4.0.2) ## glmpca 0.2.0 2020-07-18 [1] CRAN (R 4.0.2) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.0.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.0.2) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## gmp 0.6-2 2021-01-07 [1] CRAN (R 4.0.2) ## GO.db 3.12.1 2021-03-04 [1] Bioconductor ## goftest 1.2-2 2019-12-02 [1] CRAN (R 4.0.2) ## golem 0.3.1 2021-04-17 [1] CRAN (R 4.0.2) ## googledrive 2.0.0 2021-07-08 [1] CRAN (R 4.0.2) ## googlesheets4 1.0.0 2021-07-21 [1] CRAN (R 4.0.2) ## GOSemSim 2.16.1 2020-10-29 [1] Bioconductor ## GOstats 2.56.0 2020-10-27 [1] Bioconductor ## gower 0.2.2 2020-06-23 [1] CRAN (R 4.0.2) ## gplots 3.1.1 2020-11-28 [1] CRAN (R 4.0.2) ## gprofiler2 0.2.0 2020-08-27 [1] CRAN (R 4.0.2) ## graph 1.68.0 2020-10-27 [1] Bioconductor ## P graphics * 4.0.2 2020-06-23 [1] local ## graphite 1.36.0 2020-10-27 [1] Bioconductor ## graphlayouts 0.7.1 2020-10-26 [1] CRAN (R 4.0.2) ## P grDevices * 4.0.2 2020-06-23 [1] local ## grid 4.0.2 2020-06-23 [?] local ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.0.0) ## gridGraphics 0.5-1 2020-12-13 [1] CRAN (R 4.0.2) ## gridSVG 1.7-2 2020-04-28 [1] CRAN (R 4.0.2) ## groupedstats 2.0.1 2021-01-21 [1] CRAN (R 4.0.2) ## GSA 1.03.1 2019-01-31 [1] CRAN (R 4.0.2) ## GSEABase 1.52.1 2020-12-11 [1] Bioconductor ## gsubfn 0.7 2018-03-16 [1] CRAN (R 4.0.2) ## GSVA 1.38.2 2021-02-11 [1] Bioconductor ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.0.0) ## gtools 3.9.2 2021-06-06 [1] CRAN (R 4.0.2) ## GWASExactHW 1.01 2013-01-05 [1] CRAN (R 4.0.0) ## h2o 3.32.1.3 2021-05-23 [1] CRAN (R 4.0.2) ## hardhat 0.1.6 2021-07-14 [1] CRAN (R 4.0.2) ## hash 2.2.6.1 2019-03-04 [1] CRAN (R 4.0.2) ## haven 2.4.2 2021-08-02 [1] CRAN (R 4.0.2) ## HDF5Array 1.18.1 2021-02-04 [1] Bioconductor ## hdf5r 1.3.3 2020-08-18 [1] CRAN (R 4.0.2) ## here 1.0.1 2020-12-13 [1] CRAN (R 4.0.2) ## hexbin 1.28.2 2021-01-08 [1] CRAN (R 4.0.2) ## HGNChelper 0.8.1 2019-10-24 [1] CRAN (R 4.0.0) ## hgu133plus2.db 3.2.3 2021-03-26 [1] Bioconductor ## highlight 0.5.0 2019-12-15 [1] CRAN (R 4.0.0) ## highr 0.9 2021-04-16 [1] CRAN (R 4.0.2) ## Hmisc 4.5-0 2021-02-28 [1] CRAN (R 4.0.2) ## hms 1.1.0 2021-05-17 [1] CRAN (R 4.0.2) ## htmlTable 2.2.1 2021-05-18 [1] CRAN (R 4.0.2) ## htmltools 0.5.1.1 2021-01-22 [1] CRAN (R 4.0.2) ## htmlwidgets 1.5.3 2020-12-10 [1] CRAN (R 4.0.2) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 4.0.2) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.0.2) ## hugene10stprobeset.db 8.7.0 2020-09-03 [1] Bioconductor ## hugene10sttranscriptcluster.db 8.7.0 2020-09-03 [1] Bioconductor ## hugene10stv1cdf 2.18.0 2020-09-03 [1] Bioconductor ## hunspell 3.0.1 2020-12-09 [1] CRAN (R 4.0.2) ## hwriter 1.3.2 2014-09-10 [1] CRAN (R 4.0.0) ## hypeR 1.6.0 2020-10-27 [1] Bioconductor ## hypergeo 1.2-13 2016-04-07 [1] CRAN (R 4.0.2) ## ica 1.0-2 2018-05-24 [1] CRAN (R 4.0.0) ## icon 0.1.0 2020-11-03 [1] Github (ropenscilabs/icon@a5bc1cc) ## icons 0.2.0 2021-04-14 [1] Github (mitchelloharawild/icons@a758188) ## ids 1.0.1 2017-05-31 [1] CRAN (R 4.0.2) ## igraph 1.2.6 2020-10-06 [1] CRAN (R 4.0.2) ## illuminaio 0.32.0 2020-10-27 [1] Bioconductor ## impute 1.64.0 2020-10-27 [1] Bioconductor ## inegiR 3.0.0 2019-07-14 [1] CRAN (R 4.0.0) ## influenceR 0.1.0 2015-09-03 [1] CRAN (R 4.0.0) ## ini 0.3.1 2018-05-20 [1] CRAN (R 4.0.0) ## inline 0.3.19 2021-05-31 [1] CRAN (R 4.0.2) ## insight 0.14.2 2021-06-22 [1] CRAN (R 4.0.2) ## interactiveDisplayBase 1.28.0 2020-10-27 [1] Bioconductor ## inum 1.0-4 2021-04-12 [1] CRAN (R 4.0.2) ## ipmisc 6.0.2 2021-05-07 [1] CRAN (R 4.0.2) ## ipred 0.9-11 2021-03-12 [1] CRAN (R 4.0.2) ## IRanges 2.24.1 2020-12-12 [1] Bioconductor ## irlba 2.3.3 2019-02-05 [1] CRAN (R 4.0.0) ## iSEE 2.2.4 2021-02-01 [1] Bioconductor ## isoband 0.2.5 2021-07-13 [1] CRAN (R 4.0.2) ## iterators 1.0.13 2020-10-15 [1] CRAN (R 4.0.2) ## janitor 2.1.0 2021-01-05 [1] CRAN (R 4.0.2) ## jomo 2.7-2 2020-08-12 [1] CRAN (R 4.0.2) ## jpeg 0.1-9 2021-07-24 [1] CRAN (R 4.0.2) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## jsonlite 1.7.2 2020-12-09 [1] CRAN (R 4.0.2) ## JuliaCall 0.17.4 2021-05-16 [1] CRAN (R 4.0.2) ## kableExtra 1.3.4 2021-02-20 [1] CRAN (R 4.0.2) ## KEGGgraph 1.50.0 2020-10-27 [1] Bioconductor ## KEGGREST 1.30.1 2020-11-23 [1] Bioconductor ## kernlab 0.9-29 2019-11-12 [1] CRAN (R 4.0.0) ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.0.2) ## klaR 0.6-15 2020-02-19 [1] CRAN (R 4.0.2) ## knitr 1.33 2021-04-24 [1] CRAN (R 4.0.2) ## koRpus 0.13-8 2021-05-17 [1] CRAN (R 4.0.2) ## koRpus.lang.en 0.1-4 2020-10-24 [1] CRAN (R 4.0.2) ## kSamples 1.2-9 2019-05-20 [1] CRAN (R 4.0.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.0.2) ## labelled 2.8.0 2021-03-08 [1] CRAN (R 4.0.2) ## lambda.r 1.2.4 2019-09-18 [1] CRAN (R 4.0.0) ## LaplacesDemon 16.1.6 2021-07-09 [1] CRAN (R 4.0.2) ## later 1.2.0 2021-04-23 [1] CRAN (R 4.0.2) ## lattice 0.20-44 2021-05-02 [1] CRAN (R 4.0.2) ## latticeExtra 0.6-29 2019-12-19 [1] CRAN (R 4.0.0) ## lava 1.6.9 2021-03-11 [1] CRAN (R 4.0.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.0.0) ## leaflet 2.0.4.1 2021-01-07 [1] CRAN (R 4.0.2) ## leaflet.providers 1.9.0 2019-11-09 [1] CRAN (R 4.0.0) ## leaps 3.1 2020-01-16 [1] CRAN (R 4.0.0) ## learnr 0.10.1 2020-02-13 [1] CRAN (R 4.0.2) ## leiden 0.3.9 2021-07-27 [1] CRAN (R 4.0.2) ## libcoin 1.0-8 2021-02-08 [1] CRAN (R 4.0.2) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## limma 3.46.0 2020-10-27 [1] Bioconductor ## listdown 0.4.1 2020-12-07 [1] CRAN (R 4.0.2) ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.0.0) ## lme4 1.1-27.1 2021-06-22 [1] CRAN (R 4.0.2) ## lmerTest 3.1-3 2020-10-23 [1] CRAN (R 4.0.2) ## lmom 2.8 2019-03-12 [1] CRAN (R 4.0.2) ## lmtest 0.9-38 2020-09-09 [1] CRAN (R 4.0.2) ## lobstr 1.1.1 2019-07-02 [1] CRAN (R 4.0.2) ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 4.0.0) ## logistf 1.24 2020-09-16 [1] CRAN (R 4.0.2) ## logspline 2.1.16 2020-05-08 [1] CRAN (R 4.0.2) ## loo 2.4.1 2020-12-09 [1] CRAN (R 4.0.2) ## lsa 0.73.2 2020-05-04 [1] CRAN (R 4.0.2) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 4.0.2) ## magick 2.7.2 2021-05-02 [1] CRAN (R 4.0.2) ## magrittr 2.0.1 2020-11-17 [1] CRAN (R 4.0.2) ## manipulateWidget 0.11.0 2021-05-31 [1] CRAN (R 4.0.2) ## mapdata 2.3.0 2018-03-30 [1] CRAN (R 4.0.0) ## mapproj 1.2.7 2020-02-03 [1] CRAN (R 4.0.0) ## maps 3.3.0 2018-04-03 [1] CRAN (R 4.0.0) ## maptools 1.1-1 2021-03-15 [1] CRAN (R 4.0.2) ## markdown 1.1 2019-08-07 [1] CRAN (R 4.0.0) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 4.0.2) ## mathjaxr 1.4-0 2021-03-01 [1] CRAN (R 4.0.2) ## Matrix 1.3-4 2021-06-01 [1] CRAN (R 4.0.2) ## matrixcalc 1.0-5 2021-07-28 [1] CRAN (R 4.0.2) ## MatrixGenerics 1.2.1 2021-01-30 [1] Bioconductor ## MatrixModels 0.5-0 2021-03-02 [1] CRAN (R 4.0.2) ## matrixStats 0.60.0 2021-07-26 [1] CRAN (R 4.0.2) ## maxLik 1.5-2 2021-07-26 [1] CRAN (R 4.0.2) ## mc2d 0.1-21 2021-07-05 [1] CRAN (R 4.0.2) ## mclust 5.4.7 2020-11-20 [1] CRAN (R 4.0.2) ## mcmc 0.9-7 2020-03-21 [1] CRAN (R 4.0.0) ## MCMCpack 1.5-0 2021-01-20 [1] CRAN (R 4.0.2) ## meetupr 0.2.1 2020-09-23 [1] Github (rladies/meetupr@bc68cd4) ## memoise 2.0.0 2021-01-26 [1] CRAN (R 4.0.2) ## meta 4.18-2 2021-06-11 [1] CRAN (R 4.0.2) ## metaBMA 0.6.7 2021-03-17 [1] CRAN (R 4.0.2) ## metafor 3.0-2 2021-06-09 [1] CRAN (R 4.0.2) ## metaMA 3.1.2 2015-01-28 [1] CRAN (R 4.0.2) ## metap 1.4 2020-07-12 [1] CRAN (R 4.0.2) ## metaplus 1.0-2 2021-06-12 [1] CRAN (R 4.0.2) ## MetaVolcanoR 1.4.0 2020-10-27 [1] Bioconductor ## P methods * 4.0.2 2020-06-23 [1] local ## mgcv 1.8-36 2021-06-01 [1] CRAN (R 4.0.2) ## mgsub 1.7.3 2021-07-28 [1] CRAN (R 4.0.2) ## mice 3.13.0 2021-01-27 [1] CRAN (R 4.0.2) ## microbenchmark 1.4-7 2019-09-24 [1] CRAN (R 4.0.2) ## mime 0.11 2021-06-23 [1] CRAN (R 4.0.2) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 4.0.0) ## minqa 1.2.4 2014-10-09 [1] CRAN (R 4.0.0) ## miscTools 0.6-26 2019-12-08 [1] CRAN (R 4.0.2) ## mitml 0.4-1 2021-02-05 [1] CRAN (R 4.0.2) ## mixtools 1.2.0 2020-02-07 [1] CRAN (R 4.0.0) ## MLeval 0.3 2020-02-12 [1] CRAN (R 4.0.2) ## mnormt 2.0.2 2020-09-01 [1] CRAN (R 4.0.2) ## modelgrid 1.1.1.0 2018-11-04 [1] CRAN (R 4.0.2) ## ModelMetrics 1.2.2.2 2020-03-17 [1] CRAN (R 4.0.2) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 4.0.0) ## modeltools 0.2-23 2020-03-05 [1] CRAN (R 4.0.2) ## mombf 3.0.4 2021-07-13 [1] CRAN (R 4.0.2) ## msigdbr 7.4.1 2021-05-05 [1] CRAN (R 4.0.2) ## multcomp 1.4-17 2021-04-29 [1] CRAN (R 4.0.2) ## multcompView 0.1-8 2019-12-19 [1] CRAN (R 4.0.2) ## R multtest &lt;NA&gt; &lt;NA&gt; [?] &lt;NA&gt; ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.0.0) ## MuSiC 0.1.1 2021-05-01 [1] Github (xuranw/MuSiC@963d324) ## mutoss 0.1-12 2017-12-04 [1] CRAN (R 4.0.0) ## mvtnorm 1.1-2 2021-06-07 [1] CRAN (R 4.0.2) ## NCmisc 1.1.6 2018-11-12 [1] CRAN (R 4.0.2) ## ncvreg 3.13.0 2021-03-30 [1] CRAN (R 4.0.2) ## networkD3 0.4 2017-03-18 [1] CRAN (R 4.0.2) ## nlme 3.1-152 2021-02-04 [1] CRAN (R 4.0.2) ## nloptr 1.2.2.2 2020-07-02 [1] CRAN (R 4.0.0) ## nnet 7.3-16 2021-05-03 [1] CRAN (R 4.0.2) ## nnls 1.4 2012-03-19 [1] CRAN (R 4.0.0) ## nortest 1.0-4 2015-07-30 [1] CRAN (R 4.0.2) ## npGSEA 1.26.0 2020-10-27 [1] Bioconductor ## numDeriv 2016.8-1.1 2019-06-06 [1] CRAN (R 4.0.0) ## oligo 1.54.1 2020-11-04 [1] Bioconductor ## oligoClasses 1.52.0 2020-10-27 [1] Bioconductor ## OmnipathR 2.0.0 2020-10-27 [1] Bioconductor ## ontologyIndex 2.7 2021-02-03 [1] CRAN (R 4.0.2) ## ontologyPlot 1.6 2021-02-10 [1] CRAN (R 4.0.2) ## openssl 1.4.4 2021-04-30 [1] CRAN (R 4.0.2) ## openxlsx 4.2.4 2021-06-16 [1] CRAN (R 4.0.2) ## operator.tools 1.6.3 2017-02-28 [1] CRAN (R 4.0.2) ## ordinal 2019.12-10 2019-12-15 [1] CRAN (R 4.0.0) ## org.Hs.eg.db 3.12.0 2021-03-08 [1] Bioconductor ## org.Mm.eg.db 3.12.0 2021-03-08 [1] Bioconductor ## OrganismDbi 1.32.0 2020-10-27 [1] Bioconductor ## OSCA 1.0.6 2020-12-08 [1] Bioconductor ## packrat 0.6.0 2021-03-30 [1] CRAN (R 4.0.2) ## pacman 0.5.1 2019-03-11 [1] CRAN (R 4.0.2) ## pagedown 0.15 2021-06-23 [1] CRAN (R 4.0.2) ## paintmap 1.0 2016-08-31 [1] CRAN (R 4.0.0) ## pairwiseComparisons 3.1.6 2021-06-01 [1] CRAN (R 4.0.2) ## paletteer 1.4.0 2021-07-20 [1] CRAN (R 4.0.2) ## palmerpenguins 0.1.0 2020-07-23 [1] CRAN (R 4.0.2) ## pan 1.6 2018-06-29 [1] CRAN (R 4.0.0) ## parallel 4.0.2 2020-06-23 [?] local ## parallelly 1.27.0 2021-07-19 [1] CRAN (R 4.0.2) ## parameters 0.14.0 2021-05-29 [1] CRAN (R 4.0.2) ## parsnip 0.1.7 2021-07-21 [1] CRAN (R 4.0.2) ## partitions 1.10-2 2021-02-23 [1] CRAN (R 4.0.2) ## partykit 1.2-13 2021-03-03 [1] CRAN (R 4.0.2) ## patchwork 1.1.1 2020-12-17 [1] CRAN (R 4.0.2) ## pathview 1.30.1 2020-12-10 [1] Bioconductor ## pbapply 1.4-3 2020-08-18 [1] CRAN (R 4.0.2) ## pbkrtest 0.5.1 2021-03-09 [1] CRAN (R 4.0.2) ## pbmc3k.SeuratData 3.1.4 2021-07-15 [1] local ## PCAtools 2.2.0 2020-10-27 [1] Bioconductor ## pd.hg.u133a 3.12.0 2020-09-24 [1] Bioconductor ## performance 0.7.3 2021-07-21 [1] CRAN (R 4.0.2) ## permute 0.9-5 2019-03-12 [1] CRAN (R 4.0.0) ## PFAM.db 3.12.0 2021-03-04 [1] Bioconductor ## pheatmap 1.0.12 2019-01-04 [1] CRAN (R 4.0.2) ## philentropy 0.5.0 2021-05-12 [1] CRAN (R 4.0.2) ## pillar 1.6.2 2021-07-29 [1] CRAN (R 4.0.2) ## pins 0.4.5 2021-01-05 [1] CRAN (R 4.0.2) ## pixmap 0.4-12 2021-01-29 [1] CRAN (R 4.0.2) ## pkgbuild 1.2.0 2020-12-15 [1] CRAN (R 4.0.2) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.0.0) ## pkgdown 1.6.1 2020-09-12 [1] CRAN (R 4.0.2) ## pkgload 1.2.1 2021-04-06 [1] CRAN (R 4.0.2) ## pkgmaker 0.32.2.900 2021-05-01 [1] Github (renozao/pkgmaker@4818513) ## plogr 0.2.0 2018-03-25 [1] CRAN (R 4.0.0) ## plotly 4.9.4.1 2021-06-18 [1] CRAN (R 4.0.2) ## plotrix 3.8-1 2021-01-21 [1] CRAN (R 4.0.2) ## plotROC 2.2.1 2018-06-23 [1] CRAN (R 4.0.2) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.0.2) ## plyranges 1.10.0 2020-10-27 [1] Bioconductor ## PMCMRplus 1.9.0 2021-01-15 [1] CRAN (R 4.0.2) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.0.0) ## Polychrome 1.3.1 2021-07-16 [1] CRAN (R 4.0.2) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.0.2) ## polynom 1.4-0 2019-03-22 [1] CRAN (R 4.0.0) ## praise 1.0.0 2015-08-11 [1] CRAN (R 4.0.0) ## preprocessCore 1.52.1 2021-01-08 [1] Bioconductor ## prettydoc 0.4.1 2021-01-10 [1] CRAN (R 4.0.2) ## prettymapr 0.2.2 2017-09-20 [1] CRAN (R 4.0.2) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.0.0) ## prismatic 1.0.0 2021-01-05 [1] CRAN (R 4.0.2) ## pROC 1.17.0.1 2021-01-13 [1] CRAN (R 4.0.2) ## processx 3.5.2 2021-04-30 [1] CRAN (R 4.0.2) ## prodlim 2019.11.13 2019-11-17 [1] CRAN (R 4.0.2) ## productplots 0.1.1 2016-07-02 [1] CRAN (R 4.0.0) ## profmem 0.6.0 2020-12-13 [1] CRAN (R 4.0.2) ## proftools 0.99-3 2020-07-08 [1] CRAN (R 4.0.2) ## profvis 0.3.7 2020-11-02 [1] CRAN (R 4.0.2) ## progress 1.2.2 2019-05-16 [1] CRAN (R 4.0.0) ## proj4 1.0-10.1 2021-01-26 [1] CRAN (R 4.0.2) ## promises 1.2.0.1 2021-02-11 [1] CRAN (R 4.0.2) ## ProtGenerics 1.22.0 2020-10-27 [1] Bioconductor ## proto 1.0.0 2016-10-29 [1] CRAN (R 4.0.2) ## proxy 0.4-26 2021-06-07 [1] CRAN (R 4.0.2) ## pryr 0.1.5 2021-07-26 [1] CRAN (R 4.0.2) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.0.2) ## pscl 1.5.5 2020-03-07 [1] CRAN (R 4.0.2) ## psych 2.1.6 2021-06-18 [1] CRAN (R 4.0.2) ## PulmonDB 1.0.1 2020-11-16 [1] Github (AnaBVA/PulmonDB@318b834) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.0.0) ## pvclust 2.2-0 2019-11-19 [1] CRAN (R 4.0.0) ## pwr 1.3-0 2020-03-17 [1] CRAN (R 4.0.2) ## qap 0.1-1 2017-02-27 [1] CRAN (R 4.0.0) ## quantreg 5.86 2021-06-06 [1] CRAN (R 4.0.2) ## questionr 0.7.4 2020-11-30 [1] CRAN (R 4.0.2) ## qvalue 2.22.0 2020-10-27 [1] Bioconductor ## R.cache 0.15.0 2021-04-30 [1] CRAN (R 4.0.2) ## R.methodsS3 1.8.1 2020-08-26 [1] CRAN (R 4.0.2) ## R.oo 1.24.0 2020-08-26 [1] CRAN (R 4.0.2) ## R.utils 2.10.1 2020-08-26 [1] CRAN (R 4.0.2) ## r2d3 0.2.5 2020-12-18 [1] CRAN (R 4.0.2) ## R6 2.5.0 2020-10-28 [1] CRAN (R 4.0.2) ## ragg 1.1.3 2021-06-09 [1] CRAN (R 4.0.2) ## randomcoloR 1.1.0.1 2019-11-24 [1] CRAN (R 4.0.2) ## randomForest 4.6-14 2018-03-25 [1] CRAN (R 4.0.2) ## ranger 0.13.1 2021-07-14 [1] CRAN (R 4.0.2) ## RANN 2.6.1 2019-01-08 [1] CRAN (R 4.0.0) ## rappdirs 0.3.3 2021-01-31 [1] CRAN (R 4.0.2) ## raster 3.4-13 2021-06-18 [1] CRAN (R 4.0.2) ## RBGL 1.66.0 2020-10-27 [1] Bioconductor ## rbibutils 2.2.2 2021-07-31 [1] CRAN (R 4.0.2) ## rcmdcheck 1.3.3 2019-05-07 [1] CRAN (R 4.0.0) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 4.0.2) ## rcompanion 2.4.1 2021-05-18 [1] CRAN (R 4.0.2) ## Rcpp 1.0.7 2021-07-07 [1] CRAN (R 4.0.2) ## RcppAnnoy 0.0.19 2021-07-30 [1] CRAN (R 4.0.2) ## RcppArmadillo 0.10.6.0.0 2021-07-16 [1] CRAN (R 4.0.2) ## RcppEigen 0.3.3.9.1 2020-12-17 [1] CRAN (R 4.0.2) ## RcppGSL 0.3.9 2021-06-23 [1] CRAN (R 4.0.2) ## RcppHNSW 0.3.0 2020-09-06 [1] CRAN (R 4.0.2) ## RcppNumerical 0.4-0 2019-12-02 [1] CRAN (R 4.0.2) ## RcppParallel 5.1.4 2021-05-04 [1] CRAN (R 4.0.2) ## RcppProgress 0.4.2 2020-02-06 [1] CRAN (R 4.0.0) ## RcppZiggurat 0.1.6 2020-10-20 [1] CRAN (R 4.0.2) ## RCurl 1.98-1.3 2021-03-16 [1] CRAN (R 4.0.2) ## RCy3 2.10.2 2020-11-19 [1] Bioconductor ## Rdpack 2.1.2 2021-06-01 [1] CRAN (R 4.0.2) ## rdrop2 0.8.2.1 2020-08-05 [1] CRAN (R 4.0.2) ## reactable 0.2.3 2020-10-04 [1] CRAN (R 4.0.2) ## reactR 0.4.4 2021-02-22 [1] CRAN (R 4.0.2) ## readbitmap 0.1.5 2018-06-27 [1] CRAN (R 4.0.2) ## reader 1.0.6 2017-01-03 [1] CRAN (R 4.0.2) ## readr 2.0.0 2021-07-20 [1] CRAN (R 4.0.2) ## readxl 1.3.1 2019-03-13 [1] CRAN (R 4.0.0) ## recipes 0.1.16 2021-04-16 [1] CRAN (R 4.0.2) ## recount 1.16.1 2020-12-18 [1] Bioconductor ## recount3 1.0.7 2021-02-11 [1] Bioconductor ## RefManageR 1.3.0 2020-11-13 [1] CRAN (R 4.0.2) ## registry 0.5-1 2019-03-05 [1] CRAN (R 4.0.0) ## rematch 1.0.1 2016-04-21 [1] CRAN (R 4.0.0) ## rematch2 2.1.2 2020-05-01 [1] CRAN (R 4.0.0) ## remotes 2.4.0 2021-06-02 [1] CRAN (R 4.0.2) ## rentrez 1.2.3 2020-11-10 [1] CRAN (R 4.0.2) ## renv 0.14.0 2021-07-21 [1] CRAN (R 4.0.2) ## ReportingTools 2.30.2 2021-03-08 [1] Bioconductor ## repr 1.1.3 2021-01-21 [1] CRAN (R 4.0.2) ## reprex 2.0.0 2021-04-02 [1] CRAN (R 4.0.2) ## reshape 0.8.8 2018-10-23 [1] CRAN (R 4.0.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.0.0) ## ResidualMatrix 1.0.0 2020-10-27 [1] Bioconductor ## reticulate 1.20-9001 2021-07-15 [1] Github (rstudio/reticulate@477f2c0) ## rex 1.2.0 2020-04-21 [1] CRAN (R 4.0.0) ## Rfast 2.0.3 2021-05-17 [1] CRAN (R 4.0.2) ## rgdal 1.5-23 2021-02-03 [1] CRAN (R 4.0.2) ## rgexf 0.16.0 2020-02-17 [1] CRAN (R 4.0.0) ## rgl 0.107.10 2021-07-22 [1] CRAN (R 4.0.2) ## RgoogleMaps 1.4.5.3 2020-02-12 [1] CRAN (R 4.0.0) ## Rgraphviz 2.34.0 2020-10-27 [1] Bioconductor ## rhandsontable 0.3.8 2021-05-27 [1] CRAN (R 4.0.2) ## rhdf5 2.34.0 2020-10-27 [1] Bioconductor ## rhdf5filters 1.2.1 2021-05-03 [1] Bioconductor ## Rhdf5lib 1.12.1 2021-01-26 [1] Bioconductor ## Rhtslib 1.22.0 2020-10-27 [1] Bioconductor ## rintrojs 0.3.0 2021-06-06 [1] CRAN (R 4.0.2) ## rio 0.5.27 2021-06-21 [1] CRAN (R 4.0.2) ## rJava 1.0-4 2021-04-29 [1] CRAN (R 4.0.2) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 4.0.0) ## RJSONIO 1.3-1.4 2020-01-15 [1] CRAN (R 4.0.0) ## rlang 0.4.11 2021-04-30 [1] CRAN (R 4.0.2) ## rmarkdown 2.9 2021-06-15 [1] CRAN (R 4.0.2) ## Rmpfr 0.8-4 2021-04-11 [1] CRAN (R 4.0.2) ## rmsfact 0.0.3 2016-08-04 [1] CRAN (R 4.0.2) ## RMySQL 0.10.22 2021-06-22 [1] CRAN (R 4.0.2) ## rngtools 1.5 2020-01-23 [1] CRAN (R 4.0.0) ## robumeta 2.0 2017-05-29 [1] CRAN (R 4.0.2) ## robustbase 0.93-8 2021-06-02 [1] CRAN (R 4.0.2) ## ROCR 1.0-11 2020-05-02 [1] CRAN (R 4.0.0) ## Rook 1.1-1 2014-10-20 [1] CRAN (R 4.0.0) ## rootSolve 1.8.2.2 2021-07-05 [1] CRAN (R 4.0.2) ## rosm 0.2.5 2019-07-22 [1] CRAN (R 4.0.2) ## roxygen2 7.1.1 2020-06-27 [1] CRAN (R 4.0.0) ## roxygen2md 1.0.0 2019-06-17 [1] CRAN (R 4.0.0) ## rpart 4.1-15 2019-04-12 [1] CRAN (R 4.0.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## Rsamtools 2.6.0 2020-10-27 [1] Bioconductor ## rsconnect 0.8.18 2021-05-24 [1] CRAN (R 4.0.2) ## rsparkling 0.2.19 2020-01-28 [1] CRAN (R 4.0.0) ## RSpectra 0.16-0 2019-12-01 [1] CRAN (R 4.0.0) ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 4.0.2) ## rstan 2.21.2 2020-07-27 [1] CRAN (R 4.0.2) ## rstantools 2.1.1 2020-07-06 [1] CRAN (R 4.0.0) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.0.2) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.0.2) ## rsvd 1.0.5 2021-04-16 [1] CRAN (R 4.0.2) ## rsvg 2.1.2 2021-05-03 [1] CRAN (R 4.0.2) ## rticles 0.20 2021-06-23 [1] CRAN (R 4.0.2) ## rtracklayer 1.50.0 2020-10-27 [1] Bioconductor ## Rtsne 0.15 2018-11-10 [1] CRAN (R 4.0.2) ## Rttf2pt1 1.3.9 2021-07-22 [1] CRAN (R 4.0.2) ## RUnit 0.4.32 2018-05-18 [1] CRAN (R 4.0.0) ## rvcheck 0.1.8 2020-03-01 [1] CRAN (R 4.0.2) ## rversions 2.1.1 2021-05-31 [1] CRAN (R 4.0.2) ## rvest 1.0.1 2021-07-26 [1] CRAN (R 4.0.2) ## s2 1.0.6 2021-06-17 [1] CRAN (R 4.0.2) ## S4Vectors 0.28.1 2020-12-09 [1] Bioconductor ## safe 3.30.0 2020-10-27 [1] Bioconductor ## sandwich 3.0-1 2021-05-18 [1] CRAN (R 4.0.2) ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.0.2) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.0.0) ## scater 1.18.6 2021-02-26 [1] Bioconductor ## scattermore 0.7 2020-11-24 [1] CRAN (R 4.0.2) ## scatterpie 0.1.6 2021-04-23 [1] CRAN (R 4.0.2) ## scatterplot3d 0.3-41 2018-03-14 [1] CRAN (R 4.0.0) ## scholar 0.2.2 2021-07-13 [1] CRAN (R 4.0.2) ## scPipe 1.12.0 2020-10-27 [1] Bioconductor ## scran 1.18.7 2021-04-16 [1] Bioconductor ## scRNAseq 2.4.0 2020-11-09 [1] Bioconductor ## sctransform 0.3.2 2020-12-16 [1] CRAN (R 4.0.2) ## scuttle 1.0.4 2020-12-17 [1] Bioconductor ## segmented 1.3-4 2021-04-22 [1] CRAN (R 4.0.2) ## selectr 0.4-2 2019-11-20 [1] CRAN (R 4.0.0) ## seriation 1.3.0 2021-06-30 [1] CRAN (R 4.0.2) ## servr 0.22 2021-04-14 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 4.0.2) ## sets 1.0-18 2017-12-12 [1] CRAN (R 4.0.0) ## Seurat 4.0.3 2021-06-10 [1] CRAN (R 4.0.2) ## SeuratData 0.2.1 2021-07-15 [1] Github (satijalab/seurat-data@b59556b) ## SeuratDisk 0.0.0.9019 2021-07-15 [1] Github (mojaveazure/seurat-disk@163f1aa) ## SeuratObject 4.0.2 2021-06-09 [1] CRAN (R 4.0.2) ## sf 1.0-2 2021-07-26 [1] CRAN (R 4.0.2) ## shades 1.4.0 2019-08-02 [1] CRAN (R 4.0.2) ## shadowtext 0.0.8 2021-04-23 [1] CRAN (R 4.0.2) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.0.2) ## shapefiles 0.7 2013-01-26 [1] CRAN (R 4.0.2) ## shiny 1.6.0 2021-01-25 [1] CRAN (R 4.0.2) ## shinyAce 0.4.1 2019-09-24 [1] CRAN (R 4.0.2) ## shinyBS 0.61 2015-03-31 [1] CRAN (R 4.0.2) ## shinycssloaders 1.0.0 2020-07-28 [1] CRAN (R 4.0.2) ## shinydashboard 0.7.1 2018-10-17 [1] CRAN (R 4.0.2) ## shinyjs 2.0.0 2020-09-09 [1] CRAN (R 4.0.2) ## shinypanel 0.1.4 2021-01-07 [1] CRAN (R 4.0.2) ## shinystan 2.5.0 2018-05-01 [1] CRAN (R 4.0.0) ## shinythemes 1.2.0 2021-01-25 [1] CRAN (R 4.0.2) ## shinyWidgets 0.6.0 2021-03-15 [1] CRAN (R 4.0.2) ## showtext 0.9-3 2021-07-26 [1] CRAN (R 4.0.2) ## showtextdb 3.0 2020-06-04 [1] CRAN (R 4.0.0) ## SingleCellExperiment 1.12.0 2020-10-27 [1] Bioconductor ## sitmo 2.0.1 2019-01-07 [1] CRAN (R 4.0.0) ## sjlabelled 1.1.8 2021-05-11 [1] CRAN (R 4.0.2) ## sjmisc 2.8.7 2021-05-12 [1] CRAN (R 4.0.2) ## sjstats 0.18.1 2021-01-09 [1] CRAN (R 4.0.2) ## skimr 2.1.3 2021-03-07 [1] CRAN (R 4.0.2) ## slackr 2.4.1 2021-07-06 [1] CRAN (R 4.0.2) ## sloop 1.0.1 2019-02-17 [1] CRAN (R 4.0.2) ## SMVar 1.3.3 2012-10-29 [1] CRAN (R 4.0.2) ## sn 2.0.0 2021-03-28 [1] CRAN (R 4.0.2) ## snakecase 0.11.0 2019-05-25 [1] CRAN (R 4.0.2) ## snow 0.4-3 2018-09-14 [1] CRAN (R 4.0.0) ## SnowballC 0.7.0 2020-04-01 [1] CRAN (R 4.0.2) ## sourcetools 0.1.7 2018-04-25 [1] CRAN (R 4.0.0) ## sp 1.4-5 2021-01-10 [1] CRAN (R 4.0.2) ## spam 2.7-0 2021-06-25 [1] CRAN (R 4.0.2) ## sparklyr 1.7.1 2021-06-17 [1] CRAN (R 4.0.2) ## SparseM 1.81 2021-02-18 [1] CRAN (R 4.0.2) ## sparseMatrixStats 1.2.1 2021-02-02 [1] Bioconductor ## spatial 7.3-14 2021-05-03 [1] CRAN (R 4.0.2) ## SpatialExperiment 1.0.0 2020-10-27 [1] Bioconductor ## spatialLIBD 1.2.1 2020-12-21 [1] Bioconductor ## spatstat 2.2-0 2021-06-23 [1] CRAN (R 4.0.2) ## spatstat.core 2.3-0 2021-07-16 [1] CRAN (R 4.0.2) ## spatstat.data 2.1-0 2021-03-21 [1] CRAN (R 4.0.2) ## spatstat.geom 2.2-2 2021-07-12 [1] CRAN (R 4.0.2) ## spatstat.linnet 2.3-0 2021-07-17 [1] CRAN (R 4.0.2) ## spatstat.sparse 2.0-0 2021-03-16 [1] CRAN (R 4.0.2) ## spatstat.utils 2.2-0 2021-06-14 [1] CRAN (R 4.0.2) ## spelling 2.2 2020-10-18 [1] CRAN (R 4.0.2) ## SPIA 2.42.0 2020-10-27 [1] Bioconductor ## splines 4.0.2 2020-06-23 [?] local ## SQUAREM 2021.1 2021-01-13 [1] CRAN (R 4.0.2) ## StanHeaders 2.21.0-7 2020-12-17 [1] CRAN (R 4.0.2) ## staplr 3.1.1 2021-01-11 [1] CRAN (R 4.0.2) ## statmod 1.4.36 2021-05-10 [1] CRAN (R 4.0.2) ## P stats * 4.0.2 2020-06-23 [1] local ## stats4 4.0.2 2020-06-23 [?] local ## statsExpressions 1.1.0 2021-05-30 [1] CRAN (R 4.0.2) ## stringdist 0.9.7 2021-07-28 [1] CRAN (R 4.0.2) ## stringi 1.7.3 2021-07-16 [1] CRAN (R 4.0.2) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## styler 1.5.1 2021-07-13 [1] CRAN (R 4.0.2) ## SummarizedExperiment 1.20.0 2020-10-27 [1] Bioconductor ## SuppDists 1.1-9.5 2020-01-18 [1] CRAN (R 4.0.2) ## supraHex 1.28.2 2021-04-29 [1] Bioconductor ## survival 3.2-11 2021-04-26 [1] CRAN (R 4.0.2) ## sva 3.38.0 2020-10-27 [1] Bioconductor ## svglite 2.0.0 2021-02-20 [1] CRAN (R 4.0.2) ## sylly 0.1-6 2020-09-20 [1] CRAN (R 4.0.2) ## sylly.en 0.1-3 2018-03-19 [1] CRAN (R 4.0.2) ## sys 3.4 2020-07-23 [1] CRAN (R 4.0.2) ## sysfonts 0.8.4 2021-07-26 [1] CRAN (R 4.0.2) ## systemfonts 1.0.2 2021-05-11 [1] CRAN (R 4.0.2) ## tcltk 4.0.2 2020-06-23 [?] local ## tensor 1.5 2012-05-05 [1] CRAN (R 4.0.2) ## TENxPBMCData 1.8.0 2020-10-29 [1] Bioconductor ## testit 0.13 2021-04-14 [1] CRAN (R 4.0.2) ## testthat 3.0.4 2021-07-01 [1] CRAN (R 4.0.2) ## textshaping 0.3.5 2021-06-09 [1] CRAN (R 4.0.2) ## TFisher 0.2.0 2018-03-21 [1] CRAN (R 4.0.0) ## TH.data 1.0-10 2019-01-21 [1] CRAN (R 4.0.0) ## threejs 0.3.3 2020-01-21 [1] CRAN (R 4.0.0) ## tibble 3.1.3 2021-07-23 [1] CRAN (R 4.0.2) ## tibbletime 0.1.6 2020-07-21 [1] CRAN (R 4.0.2) ## tidyBF 0.5.0 2021-03-04 [1] CRAN (R 4.0.2) ## tidycensus 1.0 2021-05-19 [1] CRAN (R 4.0.2) ## tidygraph 1.2.0 2020-05-12 [1] CRAN (R 4.0.2) ## tidyr 1.1.3 2021-03-03 [1] CRAN (R 4.0.2) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 4.0.2) ## tidyverse 1.3.1 2021-04-15 [1] CRAN (R 4.0.2) ## tiff 0.1-8 2021-03-31 [1] CRAN (R 4.0.2) ## tigris 1.4.1 2021-06-18 [1] CRAN (R 4.0.2) ## tikzDevice 0.12.3.1 2020-06-30 [1] CRAN (R 4.0.0) ## timeDate 3043.102 2018-02-21 [1] CRAN (R 4.0.2) ## tinytex 0.32 2021-05-29 [1] CRAN (R 4.0.2) ## titanic 0.1.0 2015-08-31 [1] CRAN (R 4.0.2) ## TMB 1.7.20 2021-04-08 [1] CRAN (R 4.0.2) ## tmvnsim 1.0-2 2016-12-15 [1] CRAN (R 4.0.0) ## P tools 4.0.2 2020-06-23 [1] local ## topconfects 1.6.0 2020-10-27 [1] Bioconductor ## topGO 2.42.0 2020-10-30 [1] Bioconductor ## treemapify 2.5.5 2021-01-08 [1] CRAN (R 4.0.2) ## triebeard 0.3.0 2016-08-04 [1] CRAN (R 4.0.2) ## tsne 0.1-3 2016-07-15 [1] CRAN (R 4.0.0) ## TSP 1.1-10 2020-04-17 [1] CRAN (R 4.0.0) ## tufte 0.10 2021-05-17 [1] CRAN (R 4.0.2) ## tufterhandout 1.2.1 2015-01-27 [1] CRAN (R 4.0.2) ## tweenr 1.0.2 2021-03-23 [1] CRAN (R 4.0.2) ## tweetrmd 0.0.8 2021-02-23 [1] Github (gadenbuie/tweetrmd@50bcdf8) ## TxDb.Hsapiens.UCSC.hg19.knownGene 3.2.2 2020-09-03 [1] Bioconductor ## tximeta 1.8.5 2021-04-12 [1] Bioconductor ## tximport 1.18.0 2020-10-27 [1] Bioconductor ## tzdb 0.1.2 2021-07-20 [1] CRAN (R 4.0.2) ## ucminf 1.1-4 2016-08-18 [1] CRAN (R 4.0.0) ## units 0.7-2 2021-06-08 [1] CRAN (R 4.0.2) ## UpSetR 1.4.0 2019-05-22 [1] CRAN (R 4.0.0) ## urltools 1.7.3 2019-04-14 [1] CRAN (R 4.0.2) ## usethis 2.0.1 2021-02-10 [1] CRAN (R 4.0.2) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.0.2) ## P utils * 4.0.2 2020-06-23 [1] local ## uuid 0.1-4 2020-02-26 [1] CRAN (R 4.0.0) ## uwot 0.1.10 2020-12-15 [1] CRAN (R 4.0.2) ## V8 3.4.2 2021-05-01 [1] CRAN (R 4.0.2) ## VariantAnnotation 1.36.0 2020-10-28 [1] Bioconductor ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.0.2) ## vegan 2.5-7 2020-11-28 [1] CRAN (R 4.0.2) ## VGAM 1.1-5 2021-01-14 [1] CRAN (R 4.0.2) ## ViolenciaContraMujeres 0.1.0 2020-07-27 [1] Github (RladiesQro/ViolenciaContraMujeres@bb45b45) ## vipor 0.4.5 2017-03-22 [1] CRAN (R 4.0.2) ## viridis 0.6.1 2021-05-11 [1] CRAN (R 4.0.2) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.0.2) ## visNetwork 2.0.9 2019-12-06 [1] CRAN (R 4.0.0) ## vitae 0.4.2 2021-02-17 [1] CRAN (R 4.0.2) ## vroom 1.5.3 2021-07-14 [1] CRAN (R 4.0.2) ## vsn 3.58.0 2020-10-28 [1] Bioconductor ## waiter 0.2.3 2021-07-21 [1] CRAN (R 4.0.2) ## waldo 0.2.5 2021-03-08 [1] CRAN (R 4.0.2) ## WDI 2.7.4 2021-04-06 [1] CRAN (R 4.0.2) ## WebGestaltR 0.4.4 2020-07-24 [1] CRAN (R 4.0.2) ## webshot 0.5.2 2019-11-22 [1] CRAN (R 4.0.0) ## websocket 1.4.0 2021-04-23 [1] CRAN (R 4.0.2) ## WGCNA 1.70-3 2021-02-28 [1] CRAN (R 4.0.2) ## whisker 0.4 2019-08-28 [1] CRAN (R 4.0.0) ## withr 2.4.2 2021-04-18 [1] CRAN (R 4.0.2) ## wk 0.5.0 2021-07-13 [1] CRAN (R 4.0.2) ## wordcountaddin 0.3.0.9000 2020-12-01 [1] Github (benmarwick/wordcountaddin@8c06313) ## workflows 0.2.3 2021-07-16 [1] CRAN (R 4.0.2) ## WRS2 1.1-3 2021-07-20 [1] CRAN (R 4.0.2) ## xaringan 0.22 2021-06-23 [1] CRAN (R 4.0.2) ## xaringanthemer 0.4.0 2021-06-24 [1] CRAN (R 4.0.2) ## xbioc 0.1.19 2021-05-01 [1] Github (renozao/xbioc@1354168) ## xfun 0.24 2021-06-15 [1] CRAN (R 4.0.2) ## xgboost 1.4.1.1 2021-04-22 [1] CRAN (R 4.0.2) ## xkcd 0.0.6 2018-07-11 [1] CRAN (R 4.0.2) ## XKCDdata 0.1.0 2021-01-06 [1] Github (RobertMyles/XKCDdata@f147d70) ## XML 3.99-0.6 2021-03-16 [1] CRAN (R 4.0.2) ## xml2 1.3.2 2020-04-23 [1] CRAN (R 4.0.0) ## xopen 1.0.0 2018-09-17 [1] CRAN (R 4.0.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.0.0) ## xts 0.12.1 2020-09-09 [1] CRAN (R 4.0.2) ## XVector 0.30.0 2020-10-28 [1] Bioconductor ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## zeallot 0.1.0 2018-01-28 [1] CRAN (R 4.0.0) ## zellkonverter 1.0.3 2021-03-08 [1] Bioconductor ## zip 2.2.0 2021-05-31 [1] CRAN (R 4.0.2) ## zlibbioc 1.36.0 2020-10-28 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.0.2) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library ## ## P ── Loaded and on-disk path mismatch. ## R ── Package was removed from disk. Fecha de la última actualización de esta página: 2021-08-08 04:43:45. Licencia This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["introducción-a-r-y-rstudio.html", "1 Introducción a R y RStudio 1.1 R 1.2 GitHub 1.3 RStudio 1.4 Material del curso Patrocinadores", " 1 Introducción a R y RStudio Instructor: Leonardo Collado Torres 1.1 R R: es gratis, de acceso libre, utilizado para muchos campos de trabajo, fuerte en la bioinformática a través de Bioconductor Instalación a través de CRAN: https://cran.r-project.org/ Para explorar que se puede hacer con R: R Weekly https://rweekly.org/ R Bloggers https://www.r-bloggers.com/ Twitter https://twitter.com/search?q=%23rstats&amp;src=typed_query Twitter en español https://twitter.com/search?q=%23rstatsES&amp;src=typed_query TidyTuesday https://twitter.com/search?q=%23TidyTuesday&amp;src=typed_query DatosDeMiercoles https://twitter.com/search?q=%23datosdemiercoles&amp;src=typed_query Para pedir ayuda hay muchas opciones https://lcolladotor.github.io/bioc_team_ds/how-to-ask-for-help.html Material en el que estoy involucrado: https://twitter.com/lcolladotor https://www.youtube.com/c/LeonardoColladoTorres/playlists LIBD rstats club https://docs.google.com/spreadsheets/d/1is8dZSd0FZ9Qi1Zvq1uRhm-P1McnJRd_zxdAfCRoMfA/edit?usp=sharing https://twitter.com/CDSBMexico y https://twitter.com/LIBDrstats https://twitter.com/Bioconductor 1.2 GitHub Permite compartir código Se complementa con Git que es para tener un control de versiones de tu código https://github.com/ComunidadBioInfo/cdsb2020/blob/master/presentaciones_flujos-de-trabajo/Introduccion-al-flujo-de-trabajo-orientado-a-proyectos.pdf Puedes tener páginas web estáticas https://pages.github.com/ https://github.com/ComunidadBioInfo/cdsb2021_scRNAseq/. En especial https://github.com/ComunidadBioInfo/cdsb2021_scRNAseq/tree/gh-pages se convierte en https://comunidadbioinfo.github.io/cdsb2021_scRNAseq/ Página personal: https://github.com/lcolladotor/lcolladotor.github.com se convierte en http://lcolladotor.github.io/. Está todo hecho con https://github.com/lcolladotor/lcolladotorsource Tip: usen el mismo nombre de usuario en GitHub, Twitter, Gmail, etc. How to be a Modern Scientist: https://lcolladotor.github.io/bioc_team_ds/how-to-be-a-modern-scientist.html 1.3 RStudio RStudio Desktop es gratis http://www.rstudio.com/products/rstudio/download/preview/ Nos ayuda a realizar muchas cosas con R de forma más rápida Demo rsthemes remotes::install_github(c( &quot;gadenbuie/rsthemes&quot; )) remotes::install_cran(&quot;suncalc&quot;) rsthemes::install_rsthemes(include_base16 = TRUE) usethis::edit_r_profile() ## From https://www.garrickadenbuie.com/project/rsthemes/ if (interactive() &amp;&amp; requireNamespace(&quot;rsthemes&quot;, quietly = TRUE)) { # Set preferred themes if not handled elsewhere.. rsthemes::set_theme_light(&quot;Solarized Light {rsthemes}&quot;) # light theme rsthemes::set_theme_dark(&quot;base16 Monokai {rsthemes}&quot;) # dark theme rsthemes::set_theme_favorite(c( &quot;Solarized Light {rsthemes}&quot;, &quot;base16 Monokai {rsthemes}&quot;, &quot;One Dark {rsthemes}&quot; )) # Whenever the R session restarts inside RStudio... setHook(&quot;rstudio.sessionInit&quot;, function(isNewSession) { # Automatically choose the correct theme based on time of day ## Used rsthemes::geolocate() once rsthemes::use_theme_auto(lat = 39.2891, lon = -76.5583) }, action = &quot;append&quot;) } ## https://blog.rstudio.com/2013/06/10/rstudio-cran-mirror/ options(repos = c(CRAN = &quot;https://cloud.r-project.org&quot;)) Es actualizado con bastante frecuencia RStudio cheatsheets https://www.rstudio.com/resources/cheatsheets/ https://github.com/rstudio/cheatsheets/raw/master/rstudio-ide.pdf RStudio projects: usalos para organizar tu código https://github.com/ComunidadBioInfo/cdsb2020/blob/master/presentaciones_flujos-de-trabajo/Trabajando-con-proyectos.pdf usethis::create_project(&quot;~/Desktop/cdsb2021_scRNAseq_notas&quot;) ## Inicien un archivo para sus notas usethis::use_r(&quot;01-notas.R&quot;) O por ejemplo el archivo 01-visualizar-mtcars.R ## Creemos el archivo R/01-visualizar-mtcars.R usethis::use_r(&quot;01-visualizar-mtcars.R&quot;) con el siguiente contenido: ## Cargar paquetes que usaremos en este código library(&quot;sessioninfo&quot;) library(&quot;here&quot;) library(&quot;ggplot2&quot;) ## Hello world print(&quot;Soy Leo&quot;) ## Crear directorio para las figuras dir.create(here::here(&quot;figuras&quot;), showWarnings = FALSE) ## Hacer una imagen de ejemplo pdf(here::here(&quot;figuras&quot;, &quot;mtcars_gear_vs_mpg.pdf&quot;), useDingbats = FALSE ) ggplot(mtcars, aes(group = gear, y = mpg)) + geom_boxplot() dev.off() ## Para reproducir mi código options(width = 120) sessioninfo::session_info() Configura usethis con GitHub vía https://usethis.r-lib.org/articles/articles/git-credentials.html ## Para poder conectar tu compu con GitHub usethis::create_github_token() ## Abrirá una página web, escoje un nombre único ## y luego da click en el botón verde al final. Después copia el token ## (son 40 caracteres) gitcreds::gitcreds_set() ## Ojo, copia el token, no tu password de git! ## Si no, terminaras en la situación descrita en ## https://github.com/r-lib/usethis/issues/1347 ## Configura tu usuario de GitHub usethis::edit_git_config() # [user] # name = Leonardo Collado Torres # email = lcolladotor@gmail.com ## Para inicializar el repositorio de Git usethis::use_git() ## Para conectar tu repositorio local de Git con los servidores de GitHub usethis::use_github() Resultado ejemplo: https://github.com/lcolladotor/cdsb2021_scRNAseq_notas. El que hice en vivo está disponible vía https://github.com/lcolladotor/cdsb2021_scRNAseq_notas_en_vivo (o https://github.com/lcolladotor/rnaseq_2021_notas_en_vivo para un ejemplo de febrero 2021). Una vez que termines, agrega la liga al repositorio con tus notas del curso en el Google Sheet del curso. (De ser necesario, pide permisos para editar el archivo.) 1.4 Material del curso Pueden descargar la versión estática con usethis::use_course('ComunidadBioInfo/cdsb2021_scRNAseq') Pueden verlo en línea a través de ComunidadBioInfo.github.io/cdsb2021_scRNAseq Pueden clonarlo desde GitHub de tal forma que podrán actualizarlo fácilmente usando git pull git clone https://github.com/ComunidadBioInfo/cdsb2021_scRNAseq.git ## Si tienen su SSH key configurarda pueden usar ## Info sobre SSH keys de GitHub: ## https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent git clone git@github.com:ComunidadBioInfo/cdsb2021_scRNAseq.git O desde R con: ## Opción más nueva: library(&quot;gert&quot;) repo &lt;- git_clone( &quot;https://github.com/ComunidadBioInfo/cdsb2021_scRNAseq&quot;, &quot;~/Desktop/cdsb2021_scRNAseq&quot; ) setwd(repo) ## Otra opción: git2r::clone( &quot;https://github.com/ComunidadBioInfo/cdsb2021_scRNAseq&quot;, &quot;~/Desktop/cdsb2021_scRNAseq&quot; ) Patrocinadores Agradecemos a nuestros patrocinadores: "],["ejercicio-usando-usethis-here-y-postcards.html", "2 Ejercicio usando usethis, here y postcards Patrocinadores", " 2 Ejercicio usando usethis, here y postcards TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["introducción-a-rna-seq-de-célula-única-scrna-seq-con-bioconductor-y-al-libro-de-osca.html", "3 Introducción a RNA-seq de célula única (scRNA-seq) con Bioconductor y al libro de OSCA Patrocinadores", " 3 Introducción a RNA-seq de célula única (scRNA-seq) con Bioconductor y al libro de OSCA TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["estructura-e-importe-de-datos.html", "4 Estructura e importe de datos Patrocinadores", " 4 Estructura e importe de datos TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["control-de-calidad.html", "5 Control de calidad Patrocinadores", " 5 Control de calidad TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["normalización-de-datos.html", "6 Normalización de datos 6.1 Material 6.2 Motivación 6.3 Datos 6.4 Normalización por escalamiento (scaling normalization) 6.5 Normalización por decircunvolución (deconvolution) 6.6 Transformación logatítmica 6.7 Otras normalizaciones 6.8 Notas finales 6.9 Adicionales 6.10 Agradecimientos 6.11 Detalles de la sesión de R Patrocinadores", " 6 Normalización de datos Instructora: Ana Beatriz Villaseñor Altamirano 6.1 Material Diapositivas de Peter Hickey: Ve las diapositivas aquí Capítulo de OSCA: Ve el capítulo del libro OSCA aquí 6.2 Motivación Al igual que otras tecnologías, sigle-cell RNA-seq (scRNA-seq) tiene errores sistemáticos y es importante conocerlos. Dentro de los más comunes se encuentran la captura de cDNA y la amplificación de PCR que se lleva acabo por célula. Tener poco material de inicio dificulta lograr una preparación de libreria consistente dando lugar a errores sistemáticos. Figure 6.1: Figura tomada de [1] La normalización tiene como objetivo remover estás diffencias sistemáticas para que no interfieran cuando comparamos los periles de expresión entre células. Al normalizar los datos, las diferencias observadas entre poblaciones célulares o condiciones son debido a la biología y no por factores técnicos. 6.2.1 Ejercicio: Conceptos básicos Da ejemplos de sesgos técnicos (TIP: ¿Qué es RPKM?). ¿Qué es correción por lote (batch effect correction)? Da un ejemplo. ¿Cuáles son las diferencias entre correción por lote y normalización? 6.3 Datos Usaremos el dataset de Zeisel. Tipos ceulares en cerebro de ratón (oligodendrocitos, microglias, neuronas, etc.) Procesado con STRT-seq (similar a CEL-seq), un sistema de microfluio. 3005 células y 18441 genes Contiene UMIs library(&#39;scRNAseq&#39;) sce.zeisel &lt;- ZeiselBrainData(ensembl = TRUE) sce.zeisel ## class: SingleCellExperiment ## dim: 18441 3005 ## metadata(0): ## assays(1): counts ## rownames(18441): ENSMUSG00000029669 ENSMUSG00000046982 ... ## ENSMUSG00000064337 ENSMUSG00000065947 ## rowData names(2): featureType originalName ## colnames(3005): 1772071015_C02 1772071017_G12 ... 1772066098_A12 ## 1772058148_F03 ## colData names(10): tissue group # ... level1class level2class ## reducedDimNames(0): ## altExpNames(2): ERCC repeat 6.3.1 Ejercicio: QC ¿Cuántos genes son mitocondriales? (TIP: is.mito) ¿Cuántos genes tienen: bajas cuentas de librería, bajos features, alto porcentaje de expresión de ERCC, alto porcentaje de genes MT? ¿Cuántas células descartamos? (TIP: perCellQCMetrics y quickPerCellQC) Gráfica los resultados 6.4 Normalización por escalamiento (scaling normalization) La normalización por escalamiento es la estrategia más simple y usada. Representa el estimado del sesgo relativo en cada célula. Se realiza dividiendo todas las cuentas de cada célula por un factor de escalamiento específico para cada una. Este factor de escalamiento se le conoce como Library Size factor. \\[ CuentasNormalizadas = Cuentas / Library Size factor\\] Suposición: Cualquier sesgo específico en cada célula (e.j. eficiencia en la captura o en la amplificación) afecta a todos los genes de igual manera a través de escalar por el promedio esperado de cuentas para dicha célula. Los valores de expresión normalizados pueden ser usados por análisis posteriores como clustering o reducción de dimenciones. 6.4.1 Tamaño de biblioteca (Library Size) Tamaño de biblioteca (Library Size): La suma total de las cuentas a tráves de todos los genes en una célula. \\[Library Size_{cell} = \\sum_{n=1}^{j} gene\\] Donde \\(j\\) es el número total de genes y \\(gene\\) es el número de cuentas por gen para cada célula. El valor de library size es el que asumimos que escala con cualquier sesgo específico en cada célula. Para escalar los datos ocuparemos un factor de escalamiento llamado Library Size factor. \\[ Library Size \\propto Library Size factor \\] Se calcula usando library size: \\[ Library Size factor = {Library Size} / {mean(Library Size)}\\] Y se define de tal manera que el promedio de Library Size factor en todas las células es igual a 1. \\[ mean(Library Size factor) = 1 \\] Lo que nos permite que los valores normalizados están en la misma escala y pueden ser útiles para la interpretación. # Estimar tamaños de librerías lib.sf.zeisel &lt;- librarySizeFactors(sce.zeisel) # Examina la distribución de los tamaños de librerías # que acabamos de estimar summary(lib.sf.zeisel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1754 0.5682 0.8669 1.0000 1.2758 4.0651 hist(log10(lib.sf.zeisel), xlab = &quot;Log10[Library Size factor]&quot;, col = &quot;grey80&quot;) 6.4.2 Ejercicio: library Size Revisa los detalles (Details) en ?scater::librarySizeFactors Calcula library Size ls.zeisel ¿Son idénticos ls.zeisel y lib.sf.zeisel? ¿Son proporcionales? Calcula lib.sf.zeisel de forma manual. TIP: Checa el código fuente 6.4.3 Puntos finales Normalizar por Library Size factor asume que no hay desigualdad en la cantidad de genes differencialmente expresados (DE) entre dos células. Es decir, que para cada grupo de genes sobre-expresados, debe existir un grupo de genes sub-expresados en la misma magnitud, cuando esto no pasa se le conoce como sesgo de composición (Veáse a continuación). Para análisis exploratorios, la precisión de la normalización no es un punto mayor a considerar. El sesgo por composición normalmente no afecta la separación de los clusters, solo la magnitud. La normalización por Library Size factor suele ser suficiente en algunas ocasiones donde se busca identificar clusters y los marcadores de los clusters. 6.5 Normalización por decircunvolución (deconvolution) Un sesgo técnico que es importante considerar es el sesgo de composición de RNA (transcriptoma). Supongamos que un gen X (o grupo de genes) se expresa en mayor cantidad en la célula A comparado a la célula B. Esto significa que más recursos fueron tomados por el gen X, disminuyendo la covertura de los demás. ¿Qué pasa si escalamos por tamaño de biblioteca? Figure 6.2: Figura tomada de [2] Este problema ha sido estudiado en bulk RNA-seq, DESeq2::estimateSizeFactorsFromMatrix() y edgeR::calcNormFactors(), contemplan este sesgo. Se assume que la mayoría de genes no estarán DE entre las muestras (en nuestro caso céluas) y cualquier diferencia entre los genes non-DE representa un sesgo el cual se remueve (calculando un factor de normalización). Sin embargo, single-cell RNA-seq tiene muchas cuentas bajas y ceros debido a limitaciones en la tecnología y no necesariamente indica ausencia de expresión. El método de scran resuelve este problema juntando las cuentas de varias células (pool) para incrementar el tamaño de las cuentas y obtener un factor de estimación que remueva el sesgo de composición de manera más precisa. Este factor calculado con las cuentas pool se les regresa individualmente a cada célula mediante decircunvolución (deconvolution). Utilizando este factor se normalizan los datos con scran::calculateSumFactors(). # Normalización por decircunvolución (deconvolution) library(&#39;scran&#39;) # Pre-clustering set.seed(100) clust.zeisel &lt;- quickCluster(sce.zeisel) # Calcula factores de tamaño para la decircunvolución (deconvolution) deconv.sf.zeisel &lt;- calculateSumFactors(sce.zeisel, clusters = clust.zeisel, min.mean = 0.1) # Examina la distribución de los factores de tamaño summary(deconv.sf.zeisel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1282 0.4859 0.8248 1.0000 1.3194 4.6521 hist(log10(deconv.sf.zeisel), xlab = &quot;Log10[Deconvolution size factor]&quot;, col = &quot;grey80&quot;) plot(lib.sf.zeisel, deconv.sf.zeisel, xlab=&quot;Library size factor&quot;, ylab=&quot;Deconvolution size factor&quot;, log=&#39;xy&#39;, pch=16 ) abline(a=0, b=1, col=&quot;red&quot;) 6.5.1 Ejercicios: deconvolution ¿Cúantos clusters rápidos obtuvimos? ¿Cúantas células por cluster obtuvimos? ¿Cúantos clusters rápidos obtendríamos si cambiamos el tamaño mínimo a 200? Usa 100 como la semilla (seed). ¿Cúantas líneas ves en la gráfica? 6.5.2 Puntos finales La normalización por decircunvolución (deconvolution) mejora los resultados para análsis posteriores de una manera más precisa que los métodos para bulk RNA-seq. scran algunas veces alcula factores negativos o ceros lo cual altera la matrix de expresión normalizada. ¡Checa los factores que calculas! summary(deconv.sf.zeisel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1282 0.4859 0.8248 1.0000 1.3194 4.6521 Si obtienes factores negativos intenta variar el número de clusters, checa si incrementar el número de células por cluster te dan factores positivos. 6.6 Transformación logatítmica 6.6.1 Motivación ¿Qué gen es más interesante? Gen X: el promedio de expresión en el tipo celular A: 50 y B: 10 Gen Y: el promedio de expresión en el tipo celular A: 1100 y B: 1000 50-10 ## [1] 40 1100-1000 ## [1] 100 log(50)-log(10) ## [1] 1.609438 log(1100)-log(1000) ## [1] 0.09531018 Una vez calculados los factores de normalización con computeSumFactors(), podemos calular las cuentas en escala logaritmica usando logNormCounts(). Estos valores resultantes son valores de expresión normalizados transformados en escala logarítmica. # Normalization # set.seed(100) # clust.zeisel &lt;- quickCluster(sce.zeisel) # sce.zeisel &lt;- computeSumFactors(sce.zeisel, cluster=clust.zeisel, min.mean=0.1) # Log transformation sce.zeisel &lt;- scater::logNormCounts(sce.zeisel) assayNames(sce.zeisel) ## [1] &quot;counts&quot; &quot;logcounts&quot; 6.6.2 Ejercicio: Transformación logatítmica ¿Qué es una pseudo-cuenta? ¿Porqué se usa? ¿Qué valor de pseudo-cuenta usa logNormCounts()? ¿Qué es la opción downsample=TRUE? 6.7 Otras normalizaciones Te invitamos a leer más sobre otras formas de normalizar, un lugar para empezar lo puedes encontrar en el curso del Sanger Institute. Si estas interesad@ en diferencias en el contenido total de RNA en cada célula checa la normalización por spike-ins. La cual asume que los spike-ins fueron añadidos en un nivel constante en cada célula. Si tienes resultados donde el library size está asociado a tus datos a pesar de haber normalizado checa la opción de downsample=TRUE dentro de la función de logNormCounts(). 6.7.1 Seurat La normalización de Seurat con NormalizeData() (tomado de aquí): Dividir cada célula por el número total de moléculas medidas en la célula. - ¿Será library size? Multiplicar ese número por un scaling factor (e.j. 10000) Sumar 1 y tomar el logaritmo natural. library(&#39;Seurat&#39;) # Create a Seurat obj sce &lt;- sce.zeisel sce &lt;- removeAltExps(sce) seurat.zeisel &lt;- as.Seurat(sce,counts = &quot;counts&quot;, data = NULL) seurat.zeisel ## An object of class Seurat ## 18441 features across 2815 samples within 1 assay ## Active assay: originalexp (18441 features, 0 variable features) # Normalize using Seurat function seurat.zeisel &lt;- NormalizeData(seurat.zeisel,normalization.method = &quot;LogNormalize&quot;) # Compare Total counts per cell after normalization ls.seurat &lt;- colSums(seurat.zeisel[[&quot;originalexp&quot;]]@data) summary(ls.seurat) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1460 2942 3693 3534 4097 4778 hist(ls.seurat) # Trying to replicate it ls.zeisel &lt;- colSums(counts(sce.zeisel)) summary(ls.zeisel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2623 8497 12964 14955 19080 60792 step1 &lt;- t(counts(sce.zeisel))/ls.zeisel # matrix(2,2,2,2) /c(1,2) step2 &lt;- step1 * 10000 step3 &lt;- t(log1p(step2)) ls.steps &lt;- colSums(step3) summary(ls.steps) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1460 2942 3693 3534 4097 4778 plot(ls.seurat,ls.steps) # Compare with deconv normalization ls.log &lt;- colSums(logcounts(sce.zeisel)) plot(ls.seurat, ls.log) Nota: scanpy ocupa un factor de normalización igual que Seurat. 6.8 Notas finales 6.8.1 Ejercicio: Conceptos básicos Da ejemplos de sesgos técnicos (TIP: ¿Qué es RPKM?). “Technical biases tend to affect genes in a similar manner, or at least in a manner related to their biophysical properties (e.g., length, GC content)” - hbctraining Algunos ejemplos de los sesgos técnicos que se contemplan son la profundidad de secuenciación y la longitud del gen. Profundidad de secuenciación: Es necesario contemplarlo para comparar entre muestras, en este caso células. Figure 6.3: Figura tomada de [2] Longitud del gen: Es necesario contemplarlo para comparar entre genes. Figure 6.4: Figura tomada de [2] ¿Qué es correción por lote (batch effect correction)? Da un ejemplo. “Large single-cell RNA sequencing (scRNA-seq) projects usually need to generate data across multiple batches due to logistical constraints. However, the processing of different batches is often subject to uncontrollable differences, e.g., changes in operator, differences in reagent quality. This results in systematic differences in the observed expression in cells from different batches, which we refer to as “batch effects”. Batch effects are problematic as they can be major drivers of heterogeneity in the data, masking the relevant biological differences and complicating interpretation of the results\" -OSCA ¿Cuáles son las diferencias entre correción por lote y normalización? “Normalization occurs regardless of the batch structure and only considers technical biases, while batch correction - as the name suggests - only occurs across batches and must consider both technical biases and biological differences. Technical biases tend to affect genes in a similar manner, or at least in a manner related to their biophysical properties (e.g., length, GC content), while biological differences between batches can be highly unpredictable” -OSCA 6.8.2 Ejercicio: QC ¿Cuántos genes son mitocondriales? (recuerdas is.mito) length(is.mito) ## [1] 34 ¿Cuántos genes tienen: bajas cuentas de librería, bajos features, alto porcentaje de expresión de ERCC, alto porcentaje de genes MT? ¿Cuántas células descartamos? (TIP: perCellQCMetrics y quickPerCellQC) colSums(as.data.frame(qc)) ## low_lib_size low_n_features high_altexps_ERCC_percent high_subsets_Mt_percent ## 0 3 66 128 ## discard ## 190 Gráfica los resultados # Plots colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Cuentas Totales&quot;), plotColData(unfiltered, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Features (genes) detectados&quot;), plotColData(unfiltered, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ERCC %&quot;), plotColData(unfiltered, y=&quot;subsets_Mt_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito %&quot;), ncol=2 ) 6.8.3 Ejercicio: library Size Revisa los detalles (Details) en ?scater::librarySizeFactors Calcula library size ls.zeisel ls.zeisel &lt;- colSums(counts(sce.zeisel)) summary(ls.zeisel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2623 8497 12964 14955 19080 60792 hist(log10(ls.zeisel), xlab = &quot;Log10[Library size]&quot;, col = &quot;grey80&quot;) ¿Son idénticos ls.zeisel y lib.sf.zeisel? identical(lib.sf.zeisel, ls.zeisel) ## [1] FALSE ¿Son proporcionales? # Checamos proporcionalidad plot( ls.zeisel, lib.sf.zeisel, log = &quot;xy&quot;, main = &quot;Proporcionalidad&quot;, xlab = &quot;Library size&quot;, ylab = &quot; Library size factor&quot; ) Calcula lib.sf.zeisel de forma manual. TIP: Checa el código fuente ## Ahora asegurate que su media sea 1 (unity mean) lib_size_factors &lt;- ls.zeisel/mean(ls.zeisel) summary(lib_size_factors) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1754 0.5682 0.8669 1.0000 1.2758 4.0651 identical(lib_size_factors, lib.sf.zeisel) ## [1] TRUE 6.8.4 Ejercicios: deconvolution ¿Cúantos clusters rápidos obtuvimos? levels(clust.zeisel) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; ¿Cúantas células por cluster obtuvimos? cells_cluster &lt;- sort(table(clust.zeisel)) cells_cluster ## clust.zeisel ## 12 7 4 6 10 1 3 11 2 8 5 9 ## 113 123 140 224 231 243 252 259 281 300 324 325 barplot(cells_cluster) ¿Cúantos clusters rápidos obtendríamos si cambiamos el tamaño mínimo a 200? Usa 100 como la semilla (seed). set.seed(100) sort(table(quickCluster(sce.zeisel, min.size = 200))) ## ## 5 9 6 1 3 10 2 4 8 7 ## 224 231 236 243 252 259 281 324 325 440 ¿Cúantas líneas ves en la gráfica? plot(lib.sf.zeisel, deconv.sf.zeisel, xlab=&quot;Library size factor&quot;, ylab=&quot;Deconvolution size factor&quot;, log=&#39;xy&#39;, pch=16, col=as.integer(factor(sce.zeisel$level1class)) ) abline(a=0, b=1, col=&quot;red&quot;) abline(a=-.2, b=0.95, col=&quot;red&quot;) abline(a=0.08, b=1, col=&quot;red&quot;) 6.8.5 Ejercicio: Transformación logatítmica ¿Qué es una pseudo-cuenta? Un número que se agrega para poder sacar el logarítmo ¿Porqué se usa? Por que log(0) = -Inf y produce error más adelante. ¿Qué valor de pseudo-cuenta usa logNormCounts()? pseudo.count = 1 ¿Qué es la opción downsample=TRUE? OSCA: Downsampling. Para cuando existe un efecto en los valores que se asocia a la library size a pesar de haber nomalizado. Funciones interesantes para después de normalizar # sce.zeisel &lt;- runPCA(sce.zeisel) # plotPCA(sce.zeisel, colour_by = &quot;level1class&quot;) # plotRLE(sce.zeisel, exprs_values = &quot;logcounts&quot;, colour_by = &quot;level1class&quot;) 6.9 Adicionales [1] 2018 BioInfoSummer Workshop [2] HBC training 6.10 Agradecimientos Este curso está basado en el libro Orchestrating Single Cell Analysis with Bioconductor de Aaron Lun, Robert Amezquita, Stephanie Hicks y Raphael Gottardo, además del curso de scRNA-seq para WEHI creado por Peter Hickey. Y en el material de la comunidadbioinfo/cdsb2020 con el permiso de Leonardo Collado-Torres. 6.11 Detalles de la sesión de R options(width = 120) sessioninfo::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os macOS 10.16 ## system x86_64, darwin17.0 ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz America/Mexico_City ## date 2021-08-08 ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.0.0) ## AnnotationDbi * 1.52.0 2020-10-27 [1] Bioconductor ## AnnotationFilter * 1.14.0 2020-10-27 [1] Bioconductor ## AnnotationHub * 2.22.1 2021-04-16 [1] Bioconductor ## askpass 1.1 2019-01-13 [1] CRAN (R 4.0.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0) ## batchelor * 1.6.3 2021-04-16 [1] Bioconductor ## beachmat 2.6.4 2020-12-20 [1] Bioconductor ## beeswarm 0.4.0 2021-06-01 [1] CRAN (R 4.0.2) ## Biobase * 2.50.0 2020-10-27 [1] Bioconductor ## BiocFileCache * 1.14.0 2020-10-27 [1] Bioconductor ## BiocGenerics * 0.36.1 2021-04-16 [1] Bioconductor ## BiocManager 1.30.16 2021-06-15 [1] CRAN (R 4.0.2) ## BiocNeighbors 1.8.2 2020-12-07 [1] Bioconductor ## BiocParallel 1.24.1 2020-11-06 [1] Bioconductor ## BiocSingular * 1.6.0 2020-10-27 [1] Bioconductor ## BiocVersion 3.12.0 2020-05-14 [1] Bioconductor ## biomaRt 2.46.3 2021-02-11 [1] Bioconductor ## Biostrings 2.58.0 2020-10-27 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] CRAN (R 4.0.2) ## bit64 4.0.5 2020-08-30 [1] CRAN (R 4.0.2) ## bitops 1.0-7 2021-04-24 [1] CRAN (R 4.0.2) ## blob 1.2.2 2021-07-23 [1] CRAN (R 4.0.2) ## bluster * 1.0.0 2020-10-27 [1] Bioconductor ## bookdown 0.22 2021-04-22 [1] CRAN (R 4.0.2) ## bslib 0.2.5.1 2021-05-18 [1] CRAN (R 4.0.2) ## cachem 1.0.5 2021-05-15 [1] CRAN (R 4.0.2) ## Cairo 1.5-12.2 2020-07-07 [1] CRAN (R 4.0.2) ## circlize 0.4.13 2021-06-09 [1] CRAN (R 4.0.2) ## cli 3.0.1 2021-07-17 [1] CRAN (R 4.0.2) ## clue 0.3-59 2021-04-16 [1] CRAN (R 4.0.2) ## cluster 2.1.2 2021-04-17 [1] CRAN (R 4.0.2) ## codetools 0.2-18 2020-11-04 [1] CRAN (R 4.0.2) ## colorspace 2.0-2 2021-06-24 [1] CRAN (R 4.0.2) ## colourpicker 1.1.0 2020-09-14 [1] CRAN (R 4.0.2) ## ComplexHeatmap 2.6.2 2020-11-12 [1] Bioconductor ## cowplot * 1.1.1 2020-12-30 [1] CRAN (R 4.0.2) ## crayon 1.4.1 2021-02-08 [1] CRAN (R 4.0.2) ## curl 4.3.2 2021-06-23 [1] CRAN (R 4.0.2) ## data.table 1.14.0 2021-02-21 [1] CRAN (R 4.0.2) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 4.0.2) ## dbplyr * 2.1.1 2021-04-06 [1] CRAN (R 4.0.2) ## DelayedArray * 0.16.3 2021-03-24 [1] Bioconductor ## DelayedMatrixStats 1.12.3 2021-02-03 [1] Bioconductor ## deldir 0.2-10 2021-02-16 [1] CRAN (R 4.0.2) ## DEoptimR 1.0-9 2021-05-24 [1] CRAN (R 4.0.2) ## digest 0.6.27 2020-10-24 [1] CRAN (R 4.0.2) ## dplyr 1.0.7 2021-06-18 [1] CRAN (R 4.0.2) ## dqrng 0.3.0 2021-05-01 [1] CRAN (R 4.0.2) ## DropletUtils * 1.10.3 2021-02-02 [1] Bioconductor ## DT 0.18 2021-04-14 [1] CRAN (R 4.0.2) ## edgeR 3.32.1 2021-01-14 [1] Bioconductor ## ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.0.2) ## EnsDb.Hsapiens.v86 * 2.99.0 2020-08-03 [1] Bioconductor ## ensembldb * 2.14.1 2021-04-19 [1] Bioconductor ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0) ## ExperimentHub * 1.16.1 2021-04-16 [1] Bioconductor ## fansi 0.5.0 2021-05-25 [1] CRAN (R 4.0.2) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.0.2) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.0.2) ## fitdistrplus 1.1-5 2021-05-28 [1] CRAN (R 4.0.2) ## foreign * 0.8-81 2020-12-22 [1] CRAN (R 4.0.2) ## fossil * 0.4.0 2020-03-23 [1] CRAN (R 4.0.2) ## fs 1.5.0 2020-07-31 [1] CRAN (R 4.0.2) ## future 1.21.0 2020-12-10 [1] CRAN (R 4.0.2) ## future.apply 1.7.0 2021-01-04 [1] CRAN (R 4.0.2) ## generics 0.1.0 2020-10-31 [1] CRAN (R 4.0.2) ## GenomeInfoDb * 1.26.7 2021-04-08 [1] Bioconductor ## GenomeInfoDbData 1.2.4 2021-03-04 [1] Bioconductor ## GenomicAlignments 1.26.0 2020-10-27 [1] Bioconductor ## GenomicFeatures * 1.42.3 2021-04-04 [1] Bioconductor ## GenomicRanges * 1.42.0 2020-10-27 [1] Bioconductor ## GetoptLong 1.0.5 2020-12-15 [1] CRAN (R 4.0.2) ## GGally 2.1.2 2021-06-21 [1] CRAN (R 4.0.2) ## ggbeeswarm 0.6.0 2017-08-07 [1] CRAN (R 4.0.2) ## ggplot2 * 3.3.5 2021-06-25 [1] CRAN (R 4.0.2) ## ggrepel * 0.9.1 2021-01-15 [1] CRAN (R 4.0.2) ## ggridges 0.5.3 2021-01-08 [1] CRAN (R 4.0.2) ## GlobalOptions 0.1.2 2020-06-10 [1] CRAN (R 4.0.0) ## globals 0.14.0 2020-11-22 [1] CRAN (R 4.0.2) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## goftest 1.2-2 2019-12-02 [1] CRAN (R 4.0.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.0.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.0.0) ## HDF5Array * 1.18.1 2021-02-04 [1] Bioconductor ## here * 1.0.1 2020-12-13 [1] CRAN (R 4.0.2) ## highr 0.9 2021-04-16 [1] CRAN (R 4.0.2) ## hms 1.1.0 2021-05-17 [1] CRAN (R 4.0.2) ## htmltools 0.5.1.1 2021-01-22 [1] CRAN (R 4.0.2) ## htmlwidgets 1.5.3 2020-12-10 [1] CRAN (R 4.0.2) ## httpuv 1.6.1 2021-05-07 [1] CRAN (R 4.0.2) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.0.2) ## ica 1.0-2 2018-05-24 [1] CRAN (R 4.0.0) ## igraph 1.2.6 2020-10-06 [1] CRAN (R 4.0.2) ## interactiveDisplayBase 1.28.0 2020-10-27 [1] Bioconductor ## IRanges * 2.24.1 2020-12-12 [1] Bioconductor ## irlba 2.3.3 2019-02-05 [1] CRAN (R 4.0.0) ## iSEE * 2.2.4 2021-02-01 [1] Bioconductor ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## jsonlite 1.7.2 2020-12-09 [1] CRAN (R 4.0.2) ## KernSmooth 2.23-20 2021-05-03 [1] CRAN (R 4.0.2) ## knitr 1.33 2021-04-24 [1] CRAN (R 4.0.2) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.0.2) ## later 1.2.0 2021-04-23 [1] CRAN (R 4.0.2) ## lattice 0.20-44 2021-05-02 [1] CRAN (R 4.0.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 4.0.0) ## leiden 0.3.9 2021-07-27 [1] CRAN (R 4.0.2) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## limma 3.46.0 2020-10-27 [1] Bioconductor ## listenv 0.8.0 2019-12-05 [1] CRAN (R 4.0.0) ## lmtest 0.9-38 2020-09-09 [1] CRAN (R 4.0.2) ## locfit 1.5-9.4 2020-03-25 [1] CRAN (R 4.0.0) ## magrittr 2.0.1 2020-11-17 [1] CRAN (R 4.0.2) ## maps * 3.3.0 2018-04-03 [1] CRAN (R 4.0.0) ## MASS 7.3-54 2021-05-03 [1] CRAN (R 4.0.2) ## Matrix * 1.3-4 2021-06-01 [1] CRAN (R 4.0.2) ## MatrixGenerics * 1.2.1 2021-01-30 [1] Bioconductor ## matrixStats * 0.60.0 2021-07-26 [1] CRAN (R 4.0.2) ## mclust 5.4.7 2020-11-20 [1] CRAN (R 4.0.2) ## memoise 2.0.0 2021-01-26 [1] CRAN (R 4.0.2) ## mgcv 1.8-36 2021-06-01 [1] CRAN (R 4.0.2) ## mime 0.11 2021-06-23 [1] CRAN (R 4.0.2) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 4.0.0) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.0.0) ## nlme 3.1-152 2021-02-04 [1] CRAN (R 4.0.2) ## openssl 1.4.4 2021-04-30 [1] CRAN (R 4.0.2) ## org.Hs.eg.db 3.12.0 2021-03-08 [1] Bioconductor ## org.Mm.eg.db * 3.12.0 2021-03-08 [1] Bioconductor ## parallelly 1.27.0 2021-07-19 [1] CRAN (R 4.0.2) ## patchwork 1.1.1 2020-12-17 [1] CRAN (R 4.0.2) ## pbapply 1.4-3 2020-08-18 [1] CRAN (R 4.0.2) ## PCAtools * 2.2.0 2020-10-27 [1] Bioconductor ## pheatmap * 1.0.12 2019-01-04 [1] CRAN (R 4.0.2) ## pillar 1.6.2 2021-07-29 [1] CRAN (R 4.0.2) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.0.0) ## plotly * 4.9.4.1 2021-06-18 [1] CRAN (R 4.0.2) ## plyr 1.8.6 2020-03-03 [1] CRAN (R 4.0.2) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.0.0) ## polyclip 1.10-0 2019-03-14 [1] CRAN (R 4.0.2) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.0.0) ## progress 1.2.2 2019-05-16 [1] CRAN (R 4.0.0) ## promises 1.2.0.1 2021-02-11 [1] CRAN (R 4.0.2) ## ProtGenerics 1.22.0 2020-10-27 [1] Bioconductor ## pryr * 0.1.5 2021-07-26 [1] CRAN (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.0.0) ## R.methodsS3 1.8.1 2020-08-26 [1] CRAN (R 4.0.2) ## R.oo 1.24.0 2020-08-26 [1] CRAN (R 4.0.2) ## R.utils 2.10.1 2020-08-26 [1] CRAN (R 4.0.2) ## R6 2.5.0 2020-10-28 [1] CRAN (R 4.0.2) ## RANN 2.6.1 2019-01-08 [1] CRAN (R 4.0.0) ## rappdirs 0.3.3 2021-01-31 [1] CRAN (R 4.0.2) ## RColorBrewer * 1.1-2 2014-12-07 [1] CRAN (R 4.0.2) ## Rcpp 1.0.7 2021-07-07 [1] CRAN (R 4.0.2) ## RcppAnnoy 0.0.19 2021-07-30 [1] CRAN (R 4.0.2) ## RCurl 1.98-1.3 2021-03-16 [1] CRAN (R 4.0.2) ## remotes 2.4.0 2021-06-02 [1] CRAN (R 4.0.2) ## reshape 0.8.8 2018-10-23 [1] CRAN (R 4.0.0) ## reshape2 1.4.4 2020-04-09 [1] CRAN (R 4.0.0) ## ResidualMatrix 1.0.0 2020-10-27 [1] Bioconductor ## reticulate 1.20-9001 2021-07-15 [1] Github (rstudio/reticulate@477f2c0) ## rhdf5 * 2.34.0 2020-10-27 [1] Bioconductor ## rhdf5filters 1.2.1 2021-05-03 [1] Bioconductor ## Rhdf5lib 1.12.1 2021-01-26 [1] Bioconductor ## Rhtslib 1.22.0 2020-10-27 [1] Bioconductor ## rintrojs 0.3.0 2021-06-06 [1] CRAN (R 4.0.2) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 4.0.0) ## rlang 0.4.11 2021-04-30 [1] CRAN (R 4.0.2) ## rmarkdown 2.9 2021-06-15 [1] CRAN (R 4.0.2) ## robustbase 0.93-8 2021-06-02 [1] CRAN (R 4.0.2) ## ROCR 1.0-11 2020-05-02 [1] CRAN (R 4.0.0) ## rpart 4.1-15 2019-04-12 [1] CRAN (R 4.0.2) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## Rsamtools 2.6.0 2020-10-27 [1] Bioconductor ## RSQLite 2.2.7 2021-04-22 [1] CRAN (R 4.0.2) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.0.2) ## rsvd 1.0.5 2021-04-16 [1] CRAN (R 4.0.2) ## rtracklayer 1.50.0 2020-10-27 [1] Bioconductor ## Rtsne * 0.15 2018-11-10 [1] CRAN (R 4.0.2) ## S4Vectors * 0.28.1 2020-12-09 [1] Bioconductor ## sass 0.4.0 2021-05-12 [1] CRAN (R 4.0.2) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.0.0) ## scater * 1.18.6 2021-02-26 [1] Bioconductor ## scattermore 0.7 2020-11-24 [1] CRAN (R 4.0.2) ## scPipe * 1.12.0 2020-10-27 [1] Bioconductor ## scran * 1.18.7 2021-04-16 [1] Bioconductor ## scRNAseq * 2.4.0 2020-11-09 [1] Bioconductor ## sctransform 0.3.2 2020-12-16 [1] CRAN (R 4.0.2) ## scuttle 1.0.4 2020-12-17 [1] Bioconductor ## sessioninfo * 1.1.1 2018-11-05 [1] CRAN (R 4.0.2) ## Seurat * 4.0.3 2021-06-10 [1] CRAN (R 4.0.2) ## SeuratObject * 4.0.2 2021-06-09 [1] CRAN (R 4.0.2) ## shape 1.4.6 2021-05-19 [1] CRAN (R 4.0.2) ## shapefiles * 0.7 2013-01-26 [1] CRAN (R 4.0.2) ## shiny 1.6.0 2021-01-25 [1] CRAN (R 4.0.2) ## shinyAce 0.4.1 2019-09-24 [1] CRAN (R 4.0.2) ## shinydashboard 0.7.1 2018-10-17 [1] CRAN (R 4.0.2) ## shinyjs 2.0.0 2020-09-09 [1] CRAN (R 4.0.2) ## shinyWidgets 0.6.0 2021-03-15 [1] CRAN (R 4.0.2) ## SingleCellExperiment * 1.12.0 2020-10-27 [1] Bioconductor ## sp * 1.4-5 2021-01-10 [1] CRAN (R 4.0.2) ## sparseMatrixStats 1.2.1 2021-02-02 [1] Bioconductor ## spatstat.core 2.3-0 2021-07-16 [1] CRAN (R 4.0.2) ## spatstat.data 2.1-0 2021-03-21 [1] CRAN (R 4.0.2) ## spatstat.geom 2.2-2 2021-07-12 [1] CRAN (R 4.0.2) ## spatstat.sparse 2.0-0 2021-03-16 [1] CRAN (R 4.0.2) ## spatstat.utils 2.2-0 2021-06-14 [1] CRAN (R 4.0.2) ## statmod 1.4.36 2021-05-10 [1] CRAN (R 4.0.2) ## stringi 1.7.3 2021-07-16 [1] CRAN (R 4.0.2) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.0) ## SummarizedExperiment * 1.20.0 2020-10-27 [1] Bioconductor ## survival 3.2-11 2021-04-26 [1] CRAN (R 4.0.2) ## tensor 1.5 2012-05-05 [1] CRAN (R 4.0.2) ## TENxPBMCData * 1.8.0 2020-10-29 [1] Bioconductor ## tibble 3.1.3 2021-07-23 [1] CRAN (R 4.0.2) ## tidyr 1.1.3 2021-03-03 [1] CRAN (R 4.0.2) ## tidyselect 1.1.1 2021-04-30 [1] CRAN (R 4.0.2) ## usethis * 2.0.1 2021-02-10 [1] CRAN (R 4.0.2) ## utf8 1.2.2 2021-07-24 [1] CRAN (R 4.0.2) ## uwot * 0.1.10 2020-12-15 [1] CRAN (R 4.0.2) ## vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.0.2) ## vipor 0.4.5 2017-03-22 [1] CRAN (R 4.0.2) ## viridis 0.6.1 2021-05-11 [1] CRAN (R 4.0.2) ## viridisLite 0.4.0 2021-04-13 [1] CRAN (R 4.0.2) ## withr 2.4.2 2021-04-18 [1] CRAN (R 4.0.2) ## xfun 0.24 2021-06-15 [1] CRAN (R 4.0.2) ## XML 3.99-0.6 2021-03-16 [1] CRAN (R 4.0.2) ## xml2 1.3.2 2020-04-23 [1] CRAN (R 4.0.0) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.0.0) ## XVector 0.30.0 2020-10-28 [1] Bioconductor ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## zlibbioc 1.36.0 2020-10-28 [1] Bioconductor ## zoo 1.8-9 2021-03-09 [1] CRAN (R 4.0.2) ## ## [1] /Library/Frameworks/R.framework/Versions/4.0/Resources/library Patrocinadores Agradecemos a nuestros patrocinadores: "],["selección-de-genes.html", "7 Selección de genes Patrocinadores", " 7 Selección de genes TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["reducción-de-dimensiones.html", "8 Reducción de dimensiones 8.1 Diapositivas de Peter Hickey 8.2 Motivación 8.3 Reducción de dimensionalidad 8.4 Dataset ilustrativo: Zeisel 8.5 Dataset ilustrativo: 10x PBMC4k no filtradas 8.6 Análisis de Componentes Principales 8.7 Reducción de dimensionalidad para visualización 8.8 Donde estamos Patrocinadores", " 8 Reducción de dimensiones Instructora: Laura Gómez-Romero 8.1 Diapositivas de Peter Hickey Contenido adaptado de: aquí 8.2 Motivación El siguiente paso en el análisis de scRNA-seq usualmente consiste en identificar grupos de células “similares” Por ejemplo: un análisis de clustering busca identificar células con un perfil transcriptómico similar al calcular distancias entre ellas Si tuviéramos un dataset con dos genes podríamos hacer una gráfica de dos dimensiones para identificar clusters de células Pero… tenemos decenas de miles de genes : Reducción de dimensionalidad 8.3 Reducción de dimensionalidad Es poible porque la expresión de diferentes genes estará correlacionada si estos genes son afectados por el mismo proceso biológico. Por lo tanto, no necesitamos almacenar información independiente para genes individuales. Podemos comprimir móltiples “features” (genes) en una ónica dimensión. Ventajas: Reduce trabajo computacional en análisis posteriores Reduce el ruido al “promediar” mútiples genes obteniendo una representación mós precisa de los patrones en los datos Permite una graficación efectiva en dos dimensiones 8.4 Dataset ilustrativo: Zeisel library(scRNAseq) sce.zeisel &lt;- ZeiselBrainData(ensembl = TRUE) Estudio de tipos celulares en el cerebro de ratón (oligodendrocitos, microglia, neuronas, etc) procesados con el sistema STRT-seq (similar a CEL-Seq) Descripción aquí Zeisel, A. et al. Brain structure. Cell types in the mouse cortex and hippocampus revealed by single-cell RNA-seq. Science 347, 1138-1142 (2015) # Quality control library(scater) is.mito &lt;- which(rowData(sce.zeisel)$featureType == &quot;mito&quot;) stats &lt;- perCellQCMetrics(sce.zeisel, subsets = list(Mt = is.mito) ) qc &lt;- quickPerCellQC(stats, percent_subsets = c(&quot;altexps_ERCC_percent&quot;, &quot;subsets_Mt_percent&quot;) ) sce.zeisel &lt;- sce.zeisel[, !qc$discard] # normalization library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.zeisel) sce.zeisel &lt;- computeSumFactors(sce.zeisel, cluster = clusters ) sce.zeisel &lt;- logNormCounts(sce.zeisel) # variance-modelling dec.zeisel &lt;- modelGeneVarWithSpikes( sce.zeisel, &quot;ERCC&quot; ) 8.5 Dataset ilustrativo: 10x PBMC4k no filtradas library(BiocFileCache) bfc &lt;- BiocFileCache() raw.path &lt;- bfcrpath(bfc, file.path( &quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot; )) untar(raw.path, exdir = file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) library(Matrix) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names = TRUE) Dataset “Células mononucleares humanas de sangre periférica” de 10X Genomics Descripción aquí Zheng, G. X. Y. et al. Massively parallel digital transcriptional profiling of single cells. Nat. Commun. 8, 14049 (2017) # gene-annotation library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol ) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys = rowData(sce.pbmc)$ID, column = &quot;SEQNAME&quot;, keytype = &quot;GENEID&quot; ) # cell-detection set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[, which(e.out$FDR &lt;= 0.001)] # quality-control stats &lt;- perCellQCMetrics(sce.pbmc, subsets = list(Mito = which(location == &quot;MT&quot;)) ) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type = &quot;higher&quot; ) sce.pbmc &lt;- sce.pbmc[, !high.mito] # normalization library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster = clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) # variance modelling set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop = 0.1) 8.6 Análisis de Componentes Principales PCA es el arma principal de la reducción de dimensionalidad PCA descubre las combinaciones (lineales) de “features” que capturan la cantidad más grande de variación In PCA, la primer combinación lineal (componente principal) se elige tal que permite capturar la mayor varianza a través de las células. El siguiente PC se elige tal que es “ortogonal” al primero y captura la cantidad más grande de la variación restante, y así sucesivamente… 8.6.1 PCA aplicado a datos de scRNA-seq Podemos realizar reducción de dimensionalidad al aplicar PCA en la matriz de cuentas transformadas (log-counts matrix) y restringiendo los análisis posteriores a los primeros PCs (top PCs) Esto puede reducir nuestro dataset de 20,000 dimensiones a, digamos, 10, sin perder demasiada información La técnica de PCA tiene muchas propiedades teóricas bien estudiadas. Hay varias formas rápidas de realizar PCA en datasets grandes. 8.6.2 Suposiciones de PCA aplicadas a los datos de scRNA-seq Los procesos biológicos afectan múltiples genes en una manera coordinada Los primeros PCs probablemente representan la estructura biológica dado que más variación puede ser capturada considerando el comportamiento correlacionado de muchos genes Se espera que el ruido técnico azaroso afecte cada gen independientemente Consideración: Los primeros PCs capturarán “batch effects” (efectos de lote) que afectan muchos genes en una manera coordinada library(scran) top.zeisel &lt;- getTopHVGs(dec.zeisel, n = 2000) library(scater) set.seed(100) sce.zeisel &lt;- runPCA(sce.zeisel, subset_row = top.zeisel ) Por default, runPCA() usa un método rápido aproximado que realiza simulaciones, por lo tanto, es necesario ‘configurar la semilla’ para obtener resultados reproducibles 8.6.3 Eligiendo el número de PCs Esta elección en análoga a la elección del numero de HVGs. Elegir más PCs evitará descartar señal biológica a expensas de retener más ruido Es común seleccionar un número de PCs “razonable” pero arbitrario (10-50), continuar con el análisis y regresar para checar la robustez de los resultados en cierto rango de valores Ahora exploraremos algunas estrategias guiadas por los datos (data-driven) para hacer esta selección 8.6.3.1 Usando el punto del codo library(PCAtools) percent.var &lt;- attr(reducedDim(sce.zeisel), &quot;percentVar&quot;) chosen.elbow &lt;- PCAtools::findElbowPoint(percent.var) plot(percent.var, xlab = &quot;PC&quot;, ylab = &quot;Variance explained (%)&quot;) abline(v = chosen.elbow, col = &quot;red&quot;) Una heurística simple es elegir el número de PCs basado en el porcentaje de varianza explicado por PCs sucesivos 8.6.3.2 Basados en la estructura de la población choices &lt;- getClusteredPCs(reducedDim(sce.zeisel)) chosen.clusters &lt;- metadata(choices)$chosen Esta es una aproximación heurística más sofisticada que usa el número de clusters como un proxy del número de subpoblaciones Supongamos que esperamos d subpoblaciones de células, en ese caso, necesitamos d-1 dimensiones para garantizar la separación de todas las subpoblaciones Pero… en un escenario real realmente no sabes cuántas poblaciones hay… Intenta con un rango para d y únicamente considera valores que produzcan a lo más d+1 clusters Cuando se seleccionan más clusters con menos dimensiones se produce ‘overclustering’ Elige una d que maximice el número de clusters sin caer en ‘overclustering’ Ventaja: Es una solución pragmática que soluciona el equilibrio sesgo-varianza en los análisis posteriores (especialmente clustering) Desventaja: Hace suposiciones fuertes sobre la naturaleza de las diferencias biológicas entre los clusters, y de hecho supone la existencia de clusters, los cuales podrían no existir en procesos biológicos como la diferenciación 8.6.4 Juntando todo set.seed(100) # Compute and store the &#39;full&#39; set of PCs sce.zeisel &lt;- runPCA(sce.zeisel, subset_row = top.zeisel) # Can also select d and store the reduced set of PCs # e.g., using the elbow point reducedDim(sce.zeisel, &quot;PCA_elbow&quot;) &lt;- reducedDim( sce.zeisel, &quot;PCA&quot; )[, 1:chosen.elbow] # e.g., based on population structure reducedDim(sce.zeisel, &quot;PCA_clusters&quot;) &lt;- reducedDim( sce.zeisel, &quot;PCA&quot; )[, 1:chosen.clusters] 8.6.5 Usando el ruido técnico library(scran) set.seed(111001001) denoised.pbmc &lt;- denoisePCA(sce.pbmc, technical = dec.pbmc, subset.row = top.pbmc ) Conserva todos los PCs hasta que el % de variación explicado alcance algun límite (por ejemplo, basado en la estimación de la variación técnica) denoisePCA() automáticamente selecciona el número de PCs Por default, denoisePCA() realiza algunas simulaciones, por lo tanto necesitamos ‘configurar la semilla’ para obtener resultados reproducibles dim(reducedDim(denoised.pbmc, &quot;PCA&quot;)) ## [1] 3985 9 La dimensionalidad del output es el límite inferior para el número de PCs requeridos para explicar toda la variación biológica. Lo que significa que cualquier número menor de PCs definitivamente descartaría algún aspecto de la señal biológica Esto no grantiza que los PCs retenidos capturen toda la señal biológica Esta técnica usualmente retiene más PCs que el método del punto del codo set.seed(001001001) denoised.zeisel &lt;- denoisePCA(sce.zeisel, technical = dec.zeisel, subset.row = top.zeisel ) dim(reducedDim(denoised.zeisel)) ## [1] 2815 50 scran::denoisePCA() internamente limita el numero de PCs, por default 5-50, para evitar la selección de excesivamente pocos PCs (cuando el ruido técnico es alto relativo al ruido biológico) o excesivamente muchos PCs (cuando el ruido técnico es demasiado bajo) Los datos de cerebro de Zeisel están cerca de este límite superior dec.pbmc2 &lt;- modelGeneVar(sce.pbmc) denoised.pbmc2 &lt;- denoisePCA(sce.pbmc, technical = dec.pbmc2, subset.row = top.pbmc ) dim(reducedDim(denoised.pbmc2)) ## [1] 3985 5 scran::denoisePCA() tiende a funcionar mejor cuando la relación media-varianza refleja el ruiudo técnico verdadero, i.e estimado por scran::modelGeneVarByPoisson() o scran::modelGeneVarWithSpikes() en vez de scran::modelGeneVar() El dataset PBMC está cerca de este límite inferior 8.7 Reducción de dimensionalidad para visualización 8.7.1 Motivación Clustering y otros algoritmos operaran fácilmente sobre 10-50 (a lo más) PCs, pero ese número es aún demasiado para la visualización Por lo tanto, necesitamos estrategias adicionales para la reducción de dimensionalidad si queremos visualizar los datos 8.7.2 Visualizando con PCA plotReducedDim(sce.zeisel, dimred = &quot;PCA&quot;) plotReducedDim(sce.zeisel, dimred = &quot;PCA&quot;, colour_by = &quot;level1class&quot; ) PCA es una técnica lineal, por lo tanto, no es eficiente para comprimir diferencias en más de 2 dimensiones en los primeros 2 PCs 8.7.3 Retos y resumen de la visualización con PCA plotReducedDim(sce.zeisel, dimred = &quot;PCA&quot;, ncomponents = 4, colour_by = &quot;level1class&quot; ) Ventajas: PCA es predecible y no introducirá estructura aritficial en los datos Es deterministico y robusto a cambios pequeños en los valores de entrada Desventajas: Usualmente no es satisfactoria paara visualizar la naturaleza compleja de los datos de scRNA-seq 8.7.4 Visualización con t-SNE set.seed(00101001101) sce.zeisel &lt;- runTSNE(sce.zeisel, dimred = &quot;PCA&quot;) plotReducedDim(sce.zeisel, dimred = &quot;TSNE&quot;, colour_by = &quot;level1class&quot;) t-stochastic neighbour embedding (t-SNE) es la visualización por excelencia de datos de scRNA-seq. Intenta encontrar una representación (no-lineal) de los datos usando pocas dimensiones que preserve las distancias entre cada punto y sus vecinos en el espacio multi-dimensional 8.7.4.1 Retos de la visualización con t-SNE set.seed(100) sce.zeisel &lt;- runTSNE(sce.zeisel, dimred = &quot;PCA&quot;, perplexity = 30 ) plotReducedDim(sce.zeisel, dimred = &quot;TSNE&quot;, colour_by = &quot;level1class&quot; ) 8.7.4.2 Preguntas ¿Qué pasa si vuelves a correr runTSNE() sin especifica la semilla? ¿Qué pasa si especificas la semilla pero cambas el valor del parámetro perplexity? 8.7.4.3 Continuando Baja perplejidad favorece la resolución de la estrucutura fina, posiblemente al grado de que la visualización parece rudio random. El siguiente foro discute la selección de parámetros para t-SNE con cierta profundidad No sobreinterpretes los resultados de t-SNE como un ‘mapa’ de las identidades de las células individuales Componentes aleatorios y selección de parámetors cambiarán la visualización La interpretación puede ser engañada por el tamaño y posición de los clusters t-SNE infla clusters densos y comprime clusters escasos t-SNE no está obligado a preservar las localizaciones relativas de clusters no-vecinos (no puedes interpretar distancias no locales) Aún así: t-SNE es una herramienta probada para visualización general de datos de scRNA-seq y sigue siendo muy popular 8.7.5 Visualización con UMAP Uniform manifold approximation and project (UMAP) es una alternativa a t-SNE Así como t-SNE, UMAP intenta encontrar una representación (no lineal) de pocas dimensiones de los datos que preserve las distancias entre cada puntos y sus vecinos en el espacio multi-dimensional t-SNE y UMAP están basados en diferentes teorías matemáticas set.seed(1100101001) sce.zeisel &lt;- runUMAP(sce.zeisel, dimred = &quot;PCA&quot;) plotReducedDim(sce.zeisel, dimred = &quot;UMAP&quot;, colour_by = &quot;level1class&quot; ) Comparado con t-SNE: UMAP tiende a tener clusters visualmente más compactos Intenta preservar más de la estructura global que t-SNE Tiende a ser más rápido que t-SNE, lo cual puede ser importante para datasets grandes. La diferencia desaprece cuando se aplican a PCs 8.7.5.1 Retos de la visualización con UMAP set.seed(100) sce.zeisel &lt;- runUMAP(sce.zeisel, dimred = &quot;PCA&quot;, n_neighbors = 15 ) plotReducedDim(sce.zeisel, dimred = &quot;UMAP&quot;, colour_by = &quot;level1class&quot; ) 8.7.5.2 Preguntas ¿Qué pasa si vuelves a correr runUMAP() sin especifica la semilla? ¿Qué pasa si especificas la semilla pero cambas el valor del parámetro n_neighbors? 8.7.5.3 Continuando Igual que para t-SNE, es necesario configurar una semilla y diferentes valores para los parámetros cambiarán la visualización Si el valor para los parámetros n_neighbors o min_dist es demasiado bajo entonces el ruido aleatorio se interpretará como estructura de alta-resolución, si son demasiado altos entonces se perderá la estructura fina TIP: Trata un rango de valores para cada parámetro para asegurarte de que no comprometen ninguna de las conclusiones derivadas de la gráfica UMAP 8.7.6 Interpretando las gráficas Recuerda: Reducción de dimensionalidad para la visualización de los datos necesariamente involucra descartar información y distorsionar las distancias entre las células No sobre interpretes las gráficas bonitas 8.7.7 Resumen y recomendaciones Las gráficas de t-SNE y UMAP son herramientas diagnóstico importantes, por ejemplo: para checar si dos clusters son realmente subclusters vecinos o si un cluster puede ser dividido en más de un cluster Es debatible cual visualización, t-SNE o UMAP, es más útil o estéticamente agradable. Está bien elegir aquélla que funcione mejor para tu análisis (tomando en cuenta que tratarás la gráfica únicamente como una herramienta de visualización/diagnóstico y que no llegarás a ninguna conclusión fuerte basado únicamente en la gráfica ) 8.8 Donde estamos Patrocinadores Agradecemos a nuestros patrocinadores: "],["clustering.html", "9 Clustering 9.1 Diapositivas de Peter Hickey 9.2 Dataset ilustrativo: 10X PBMC4k no filtrado 9.3 Motivación 9.4 ¿Por qué no realizamos el clustering sobre las coordenadas de t-SNE/UMAP? 9.5 ¿Cuál es el verdadero clustering? 9.6 Clustering basado en grafos 9.7 Implementación 9.8 Clustering basado en grafos 9.9 Otros métodos de clustering 9.10 Evaluando estabilidad de los clusters 9.11 Subclustering 9.12 Resumen y recomendaciones 9.13 Donde estamos Patrocinadores", " 9 Clustering Instructora: Laura Gómez-Romero 9.1 Diapositivas de Peter Hickey Ve las diapositivas aquí 9.2 Dataset ilustrativo: 10X PBMC4k no filtrado library(BiocFileCache) bfc &lt;- BiocFileCache() raw.path &lt;- bfcrpath(bfc, file.path( &quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot; )) untar(raw.path, exdir = file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) library(Matrix) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names = TRUE) Dataset de células mononucleares de sangre periférica humana (PBMC) de 10X Genomics Descripción aquí Zheng, G. X. Y. et al. Massively parallel digital transcriptional profiling of single cells. Nat. Commun. 8, 14049 (2017) # gene-annotation library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol ) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys = rowData(sce.pbmc)$ID, column = &quot;SEQNAME&quot;, keytype = &quot;GENEID&quot; ) # cell-detection set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[, which(e.out$FDR &lt;= 0.001)] # quality-control stats &lt;- perCellQCMetrics(sce.pbmc, subsets = list(Mito = which(location == &quot;MT&quot;)) ) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type = &quot;higher&quot; ) sce.pbmc &lt;- sce.pbmc[, !high.mito] # normalization library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster = clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) # variance modelling set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop = 0.1) # dimensionality-reduction set.seed(10000) sce.pbmc &lt;- denoisePCA(sce.pbmc, subset.row = top.pbmc, technical = dec.pbmc ) set.seed(100000) sce.pbmc &lt;- runTSNE(sce.pbmc, dimred = &quot;PCA&quot;) set.seed(1000000) sce.pbmc &lt;- runUMAP(sce.pbmc, dimred = &quot;PCA&quot;) 9.3 Motivación Clustering es un procedimiento no supervisado par definir grupos de células con perfiles de expresión similares Su propósito principal es resumir los datos en un formato digerido susceptible a interpretación humana Nos permite asignar etiquetas (por ejemplo, tipos celulares) a las células 9.4 ¿Por qué no realizamos el clustering sobre las coordenadas de t-SNE/UMAP? Las técnicas de t-SNE/UMAP han comprimido datos altamente multi-dimensionales en dos dimensiones Esta compresión inevitablemente ha provocado la perdida de información Por lo tanto, agrupamos sobre los PCs y después visualizamos las identidades de los clusters en la gráfica t-SNE/UMAP 9.5 ¿Cuál es el verdadero clustering? Un cluster no implica un tipo celular Nosotros podemos definir tantos clusters como queramos y podemos utilizar el algoritmo que más nos acomode El clustering, como un microscopio, simplemente es una herramienta para explorar los datos Preguntar por el mejor clustering es similar a preguntar cuál es la mejor magnificación en un microscopio sin contenido 9.6 Clustering basado en grafos 9.6.1 Antecedentes El clustering basado en grafos fue popularizado (más no inventado) por su uso en Seurat Objetivo: Construir un grafo en el que cada nodo es una célula que está conectada a sus vecinos más cercanos en el espacio multidimensional 9.6.2 Gráfica de los k vecinos más cercanos (k-nearest neighbour -KNN- graph) Ilustremos como funciona para 20 células 9.6.3 Gráfica de los vecinos más próximos compartidos (SNN) De una gráfica KNN se puede construir una grafica SNN Podemos asignar pesos a cada arista del grafo, basándonos en la similaridad de las células involucradas, dándole pesos más altos a células que están más cercanamente relacionadas 9.6.4 Gráfica SNN con pesos en las aristas 9.6.5 Pasando de una gráfica SNN pesada cluster mediante detección de comunidades A partir de una gráfica SNN pesada podemos aplicar algoritmos para identificar comunidades de células Comunidades son grupos de células que están más conectadas a células en el mismo grupo que lo que están a células de un grupo diferente Cada comunidad representa un cluster 9.6.6 Resumen de clustering basado en grafos La construcción y búsqueda de una red KNN es rápida, por lo tanto, es escalable para datasets grandes Debes evitar obtener conclusiones fuertes acerca de la forma de los clusters o la distribución de células dentro de cada cluster Cada célula es conectada con un número mínimo de células vecinas obligatoriamente, esto reduce el riesgo de cluster no informativos con unos pocos outliers Después de la construcción del grafo, no se almacena información adicional más alla de las células vecinas. Esto puede producir subclusters artificiales en regiones con muchas células 9.7 Implementación ¿Cuántas céulas vecinas debo considerar durante la construcción del grafo? ¿Cómo debo pesar las aristas? ¿Cuál algoritmo de detección de comunidades se debe usar para definir los clusters? 9.8 Clustering basado en grafos library(scran) # Build graph using k = 10 nearest neighbours in PCA-space g &lt;- buildSNNGraph(sce.pbmc, k = 10, use.dimred = &quot;PCA&quot;) # Identify communities using the Walktrap method clust &lt;- igraph::cluster_walktrap(g)$membership # Visualise clusters on t-SNE plot library(scater) sce.pbmc$cluster &lt;- factor(clust) plotReducedDim(sce.pbmc, &quot;TSNE&quot;, colour_by = &quot;cluster&quot;) ¿Qué pasa si utilizas una k más grande o más pequeña? 9.8.1 Detalles adicionales del ejemplo previo KNNs se basan en la distancia Euclideana entre células Las aristas se crean entre todos los pares de células que comparten por lo menos un vecino Usa el esquema de peso de: Xu and Su (2015) 9.8.2 Eligiendo un valor de k El valor de k puede ser toscamente interpretado como el tamaño anticipado de la subpoblación más pequeña Si una subpoblación tiene menos que (k+1) células entonces el método será forzado a construir aristas entre células de esa subpoblación y células de otras subpoblaciones Esto incrementa el riesgo de que la subpoblación en cuestión no forme su propio cluster 9.8.3 Estilo Seurat # Jaccard-based weights followed by Louvain clustering # aka &#39;Seurat-style&#39; clustering g &lt;- buildSNNGraph(sce.pbmc, k = 10, use.dimred = &quot;PCA&quot;, type = &quot;jaccard&quot;) clust2 &lt;- igraph::cluster_louvain(g)$membership sce.pbmc$cluster2 &lt;- factor(clust2) plotReducedDim(sce.pbmc, &quot;TSNE&quot;, colour_by = &quot;cluster2&quot;) 9.8.4 Clustering basado en un grafo Pipelines basados en Seurat: Pesos basados en Jacard Clustering Louvain Pipelines basados en Scran: Pesos basados en Randos Clustering Walktrap Para detalles sobre la seleccion de parámetros y comparaciones: visitar esta página 9.8.5 Evaluando la separación de los clusters Modularidad es una métrica natural para evaluar la separación entre comunidades/clusters Definido como la diferencia (escalada) entre el peso total observado de las aristas entre los nodos en el mismo cluster y el peso total esperado si los pesos fueran distribuidos aleatoriamente entre todos los pares de nodos Nosotros computaremos un score de modularidad para cada cluster (usando las tasas en vez de las diferencias) library(bluster) ratio &lt;- pairwiseModularity(g, clust, as.ratio = TRUE) dim(ratio) ## [1] 16 16 library(pheatmap) pheatmap(log2(ratio + 1), cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(c(&quot;white&quot;, &quot;blue&quot;))(100) ) Un dataset que contiene clusters bien separados debería contener la mayoría del peso total observado en las entradas diagonales, i.e la mayoría de las aristas ocurren entre células del mismo cluster Para más detalles sobre evaluación de la separación entre clusters visite esta página 9.9 Otros métodos de clustering Clustering por k-means Rápido Se debe especificar el número de clusters de antemano Favorece clusters esféricos Clustering jerárquico Produce un dendograma (árbol) representando las células y la similaridad entre subpoblaciones a varias resoluciones Demasiado lento para correrse en algo más grande que los datasets más pequeños de scRNA-seq 9.10 Evaluando estabilidad de los clusters Una propiedad deseable de un cluster dado es que éste sea estable a las perturbaciones en los datos de entrada: Pequeños cambios al procesamiento no cambiarán el resultado Esto incrementa la probabilida de que las conclusiones puedan ser replicadas en un estudio independiente Uno puede hacer un proceso de bootstrap para evaluar la estabilidad de un algoritmo de clustering en un dataset dado myClusterFUN &lt;- function(x) { g &lt;- buildSNNGraph(x, use.dimred = &quot;PCA&quot;, type = &quot;jaccard&quot;) igraph::cluster_louvain(g)$membership } originals &lt;- myClusterFUN(sce.pbmc) set.seed(0010010100) coassign &lt;- bootstrapStability(sce.pbmc, FUN = myClusterFUN, clusters = originals ) Coasignación es la probabilidad de que células elegidas al azar del cluster X y Y sean asignadas al mismo cluster en la réplica del proceso de bootstrap pheatmap(coassign, cluster_row = FALSE, cluster_col = FALSE, color = rev(viridis::magma(100)) ) Probabilidad alta de coasignación indica que X no es estable con respecto a su separación de Y. Queremos altas probabilidades de coasignación en la diagonal Bootstraping solo considera el efecto del ruido de muestreo e ignora otros factores que pueden afectar la reproducinilidad (efectos de batch, variación entre los donadores) Pobre separación puede ser altamente estable 9.11 Subclustering Mejora la resolucón al repetir el proceso de feature selection y clustering dentro de un único cluster Se enfoca en los HGVs y PCs que son los más relevantes para un cluster específico g.full &lt;- buildSNNGraph(sce.pbmc, use.dimred = &quot;PCA&quot;) clust.full &lt;- igraph::cluster_walktrap(g.full)$membership sce.pbmc$clust.full &lt;- factor(clust.full) plotExpression(sce.pbmc, features = c(&quot;CD3E&quot;, &quot;CCR7&quot;, &quot;CD69&quot;, &quot;CD44&quot;), x = &quot;clust.full&quot;, colour_by = &quot;clust.full&quot; ) CD3E, CCR7, CD69, y CD44 son marcadores de células T de memoria. Dentro de las células T de memoria, ¿dónde están las subpoblaciones CD4+ y CD8+? # Repeating modelling and PCA on the subset of cells we have # identified as memory T-cells (cluster 6). memory &lt;- 6 sce.memory &lt;- sce.pbmc[, clust.full == memory] dec.memory &lt;- modelGeneVar(sce.memory) sce.memory &lt;- denoisePCA(sce.memory, technical = dec.memory, subset.row = getTopHVGs(dec.memory, prop = 0.1) ) # Repeating clustering on the subset. g.memory &lt;- buildSNNGraph(sce.memory, use.dimred = &quot;PCA&quot;) clust.memory &lt;- igraph::cluster_walktrap(g.memory)$membership sce.memory$clust.memory &lt;- factor(clust.memory) plotExpression(sce.memory, features = c(&quot;CD8A&quot;, &quot;CD4&quot;), x = &quot;clust.memory&quot; ) Expresión de CD4 es bajo, por lo tanto, su cambio es modesto, pero la interpretación es clara scran::quickSubCluster() ciclará sobre los clusters y realizará el proceso de subclustering de acuerdo a una función especificada por el usuario. Esto asume que la misma función es apropiada para todos los clusters Si tipos celulares o estados celulares se extienden sobre las fronteras de los clusters, entonces un subcluster podría representar contaminación de un tipo celular en un cluster separado 9.12 Resumen y recomendaciones Un cluster no implica un tipo celular Nosotros podemos definir tantos clusters como queramos y podemos utilizar el algoritmo que más nos acomode El clustering, como un microscopio, simplemente es una herramienta para explorar los datos Preguntar por el mejor clustering es similar a preguntar cuál es la mejor magnificación en un microscopio sin contenido Clustering basado en grafos es rápido y evita tener que hacer suposiciones fuertes sobre la forma de los clusters o la distribución de las células dentro de cada cluster: scran::buildSNNGraph() igraph::cluster_walktrap() o igraph::cluster_louvain() Modularidad y estabilidad de los clusters son diagnósticos útiles El proceso de subclustering podría mejorar la resolución dentro de clusters grandes 9.13 Donde estamos Patrocinadores Agradecemos a nuestros patrocinadores: "],["identificación-de-genes-marcadores.html", "10 Identificación de genes marcadores Patrocinadores", " 10 Identificación de genes marcadores TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["anotación-de-clusters-de-células.html", "11 Anotación de clusters de células Patrocinadores", " 11 Anotación de clusters de células TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["análisis-de-expresión-diferencial.html", "12 Análisis de expresión diferencial Patrocinadores", " 12 Análisis de expresión diferencial TODO Patrocinadores Agradecemos a nuestros patrocinadores: "],["introducción-a-seurat.html", "13 Introducción a Seurat Patrocinadores", " 13 Introducción a Seurat TODO Patrocinadores Agradecemos a nuestros patrocinadores: "]]
